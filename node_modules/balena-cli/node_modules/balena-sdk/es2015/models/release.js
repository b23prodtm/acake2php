"use strict";
/*
Copyright 2016 Balena

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const errors = require("balena-errors");
const once = require("lodash/once");
const util_1 = require("../util");
const types_1 = require("../util/types");
const getReleaseModel = function (deps, opts) {
    const { pine } = deps;
    const applicationModel = once(() => require('./application').default(deps, opts));
    const { addCallbackSupportToModule, } = require('../util/callbacks');
    const { buildDependentResource, } = require('../util/dependent-resource');
    const builderHelper = once(() => {
        const { BuilderHelper, } = require('../util/builder');
        return new BuilderHelper(deps, opts);
    });
    const tagsModel = buildDependentResource({ pine }, {
        resourceName: 'release_tag',
        resourceKeyField: 'tag_key',
        parentResourceName: 'release',
        getResourceId: (commitOrId) => tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield get(commitOrId, { $select: 'id' })).id; }),
    });
    /**
     * @summary Get a specific release
     * @name get
     * @public
     * @function
     * @memberof balena.models.release
     *
     * @param {String|Number} commitOrId - release commit (string) or id (number)
     * @param {Object} [options={}] - extra pine options to use
     * @fulfil {Object} - release
     * @returns {Promise}
     *
     * @example
     * balena.models.release.get(123).then(function(release) {
     * 	console.log(release);
     * });
     *
     * @example
     * balena.models.release.get('7cf02a6').then(function(release) {
     * 	console.log(release);
     * });
     *
     * @example
     * balena.models.release.get(123, function(error, release) {
     * 	if (error) throw error;
     * 	console.log(release);
     * });
     */
    function get(commitOrId, options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (commitOrId == null) {
                throw new errors.BalenaReleaseNotFound(commitOrId);
            }
            if (util_1.isId(commitOrId)) {
                const release = yield pine.get({
                    resource: 'release',
                    id: commitOrId,
                    options: util_1.mergePineOptions({}, options),
                });
                if (release == null) {
                    throw new errors.BalenaReleaseNotFound(commitOrId);
                }
                return release;
            }
            else {
                const releases = yield pine.get({
                    resource: 'release',
                    options: util_1.mergePineOptions({
                        $filter: {
                            commit: { $startswith: commitOrId },
                        },
                    }, options),
                });
                if (releases.length === 0) {
                    throw new errors.BalenaReleaseNotFound(commitOrId);
                }
                if (releases.length > 1) {
                    throw new errors.BalenaAmbiguousRelease(commitOrId);
                }
                return releases[0];
            }
        });
    }
    /**
     * @summary Get a specific release with the details of the images built
     * @name getWithImageDetails
     * @public
     * @function
     * @memberof balena.models.release
     *
     * @description
     * This method does not map exactly to the underlying model: it runs a
     * larger prebuilt query, and reformats it into an easy to use and
     * understand format. If you want significantly more control, or to see the
     * raw model directly, use `release.get(id, options)` instead.
     *
     * @param {String|Number} commitOrId - release commit (string) or id (number)
     * @param {Object} [options={}] - a map of extra pine options
     * @param {Boolean} [options.release={}] - extra pine options for releases
     * @param {Object} [options.image={}] - extra pine options for images
     * @fulfil {Object} - release with image details
     * @returns {Promise}
     *
     * @example
     * balena.models.release.getWithImageDetails(123).then(function(release) {
     * 	console.log(release);
     * });
     *
     * @example
     * balena.models.release.getWithImageDetails('7cf02a6').then(function(release) {
     * 	console.log(release);
     * });
     *
     * @example
     * balena.models.release.getWithImageDetails(123, { image: { $select: 'build_log' } })
     * .then(function(release) {
     * 	console.log(release.images[0].build_log);
     * });
     *
     * @example
     * balena.models.release.getWithImageDetails(123, function(error, release) {
     * 	if (error) throw error;
     * 	console.log(release);
     * });
     */
    function getWithImageDetails(commitOrId, options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseImageOptions = {
                $select: 'id',
                $expand: {
                    is_a_build_of__service: {
                        $select: 'service_name',
                    },
                },
            };
            const baseReleaseOptions = {
                $expand: {
                    contains__image: {
                        $expand: {
                            image: util_1.mergePineOptions(baseImageOptions, options.image),
                        },
                    },
                    is_created_by__user: {
                        $select: types_1.toWritable(['id', 'username']),
                    },
                },
            };
            const rawRelease = (yield get(commitOrId, util_1.mergePineOptions(baseReleaseOptions, options.release)));
            const release = rawRelease;
            // Squash .contains__image[x].image[0] into a simple array
            const images = rawRelease.contains__image.map((imageJoin) => imageJoin.image[0]);
            delete release.contains__image;
            release.images = images
                .map(function (_a) {
                var { is_a_build_of__service } = _a, imageData = tslib_1.__rest(_a, ["is_a_build_of__service"]);
                const image = Object.assign(Object.assign({}, imageData), { service_name: is_a_build_of__service[0].service_name });
                return image;
            })
                .sort((a, b) => a.service_name.localeCompare(b.service_name));
            release.user = rawRelease.is_created_by__user[0];
            return release;
        });
    }
    /**
     * @summary Get all releases from an application
     * @name getAllByApplication
     * @public
     * @function
     * @memberof balena.models.release
     *
     * @param {String|Number} nameOrSlugOrId - application name (string), slug (string) or id (number)
     * @param {Object} [options={}] - extra pine options to use
     * @fulfil {Object[]} - releases
     * @returns {Promise}
     *
     * @example
     * balena.models.release.getAllByApplication('MyApp').then(function(releases) {
     * 	console.log(releases);
     * });
     *
     * @example
     * balena.models.release.getAllByApplication(123).then(function(releases) {
     * 	console.log(releases);
     * });
     *
     * @example
     * balena.models.release.getAllByApplication('MyApp', function(error, releases) {
     * 	if (error) throw error;
     * 	console.log(releases);
     * });
     */
    function getAllByApplication(nameOrSlugOrId, options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { id } = yield applicationModel().get(nameOrSlugOrId, {
                $select: 'id',
            });
            return yield pine.get({
                resource: 'release',
                options: util_1.mergePineOptions({
                    $filter: {
                        belongs_to__application: id,
                    },
                    $orderby: 'created_at desc',
                }, options),
            });
        });
    }
    /**
     * @summary Get the latest successful release for an application
     * @name getLatestByApplication
     * @public
     * @function
     * @memberof balena.models.release
     *
     * @param {String|Number} nameOrSlugOrId - application name (string), slug (string) or id (number)
     * @param {Object} [options={}] - extra pine options to use
     * @fulfil {Object|undefined} - release
     * @returns {Promise}
     *
     * @example
     * balena.models.release.getLatestByApplication('MyApp').then(function(releases) {
     * 	console.log(releases);
     * });
     *
     * @example
     * balena.models.release.getLatestByApplication(123).then(function(releases) {
     * 	console.log(releases);
     * });
     *
     * @example
     * balena.models.release.getLatestByApplication('MyApp', function(error, releases) {
     * 	if (error) throw error;
     * 	console.log(releases);
     * });
     */
    function getLatestByApplication(nameOrSlugOrId, options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [release] = yield getAllByApplication(nameOrSlugOrId, util_1.mergePineOptions({
                $top: 1,
                $filter: {
                    status: 'success',
                },
            }, options));
            return release;
        });
    }
    /**
     * @summary Create a new release built from the source in the provided url
     * @name createFromUrl
     * @public
     * @function
     * @memberof balena.models.release
     *
     * @param {String|Number} nameOrSlugOrId - application name (string), slug (string) or id (number)
     * @param {Object} urlDeployOptions - builder options
     * @param {String} urlDeployOptions.url - a url with a tarball of the project to build
     * @param {Boolean} [urlDeployOptions.shouldFlatten=true] - Should be true when the tarball includes an extra root folder with all the content
     * @fulfil {number} - release ID
     * @returns {Promise}
     *
     * @example
     * balena.models.release.createFromUrl('MyApp', { url: 'https://github.com/balena-io-projects/simple-server-node/archive/v1.0.0.tar.gz' }).then(function(releaseId) {
     * 	console.log(releaseId);
     * });
     *
     * @example
     * balena.models.release.createFromUrl(123, { url: 'https://github.com/balena-io-projects/simple-server-node/archive/v1.0.0.tar.gz' }).then(function(releaseId) {
     * 	console.log(releaseId);
     * });
     *
     * @example
     * balena.models.release.createFromUrl('MyApp', { url: 'https://github.com/balena-io-projects/simple-server-node/archive/v1.0.0.tar.gz' }, function(error, releaseId) {
     * 	if (error) throw error;
     * 	console.log(releaseId);
     * });
     */
    function createFromUrl(nameOrSlugOrId, urlDeployOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const appOptions = {
                $select: 'app_name',
                $expand: {
                    organization: {
                        $select: 'handle',
                    },
                },
            };
            const { app_name, organization } = (yield applicationModel().get(nameOrSlugOrId, appOptions));
            return yield builderHelper().buildFromUrl(organization[0].handle, app_name, urlDeployOptions);
        });
    }
    /**
     * @namespace balena.models.release.tags
     * @memberof balena.models.release
     */
    const tags = addCallbackSupportToModule({
        /**
         * @summary Get all release tags for an application
         * @name getAllByApplication
         * @public
         * @function
         * @memberof balena.models.release.tags
         *
         * @param {String|Number} nameOrSlugOrId - application name (string), slug (string) or id (number)
         * @param {Object} [options={}] - extra pine options to use
         * @fulfil {Object[]} - release tags
         * @returns {Promise}
         *
         * @example
         * balena.models.release.tags.getAllByApplication('MyApp').then(function(tags) {
         * 	console.log(tags);
         * });
         *
         * @example
         * balena.models.release.tags.getAllByApplication(999999).then(function(tags) {
         * 	console.log(tags);
         * });
         *
         * @example
         * balena.models.release.tags.getAllByApplication('MyApp', function(error, tags) {
         * 	if (error) throw error;
         * 	console.log(tags)
         * });
         */
        getAllByApplication(nameOrSlugOrId, options = {}) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { id } = yield applicationModel().get(nameOrSlugOrId, {
                    $select: 'id',
                });
                return yield tagsModel.getAll(util_1.mergePineOptions({
                    $filter: {
                        release: {
                            $any: {
                                $alias: 'r',
                                $expr: {
                                    r: {
                                        belongs_to__application: id,
                                    },
                                },
                            },
                        },
                    },
                }, options));
            });
        },
        /**
         * @summary Get all release tags for a release
         * @name getAllByRelease
         * @public
         * @function
         * @memberof balena.models.release.tags
         *
         * @param {String|Number} commitOrId - release commit (string) or id (number)
         * @param {Object} [options={}] - extra pine options to use
         * @fulfil {Object[]} - release tags
         * @returns {Promise}
         *
         * @example
         * balena.models.release.tags.getAllByRelease(123).then(function(tags) {
         * 	console.log(tags);
         * });
         *
         * @example
         * balena.models.release.tags.getAllByRelease('7cf02a6').then(function(tags) {
         * 	console.log(tags);
         * });
         *
         * @example
         * balena.models.release.tags.getAllByRelease(123, function(error, tags) {
         * 	if (error) throw error;
         * 	console.log(tags)
         * });
         */
        getAllByRelease(commitOrId, options = {}) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const releaseOpts = {
                    $select: 'id',
                    $expand: {
                        release_tag: util_1.mergePineOptions({ $orderby: 'tag_key asc' }, options),
                    },
                };
                const release = (yield get(commitOrId, releaseOpts));
                return release.release_tag;
            });
        },
        /**
         * @summary Get all release tags
         * @name getAll
         * @public
         * @function
         * @memberof balena.models.release.tags
         *
         * @param {Object} [options={}] - extra pine options to use
         * @fulfil {Object[]} - release tags
         * @returns {Promise}
         *
         * @example
         * balena.models.release.tags.getAll().then(function(tags) {
         * 	console.log(tags);
         * });
         *
         * @example
         * balena.models.release.tags.getAll(function(error, tags) {
         * 	if (error) throw error;
         * 	console.log(tags)
         * });
         */
        getAll: tagsModel.getAll,
        /**
         * @summary Set a release tag
         * @name set
         * @public
         * @function
         * @memberof balena.models.release.tags
         *
         * @param {String|Number} commitOrId - release commit (string) or id (number)
         * @param {String} tagKey - tag key
         * @param {String|undefined} value - tag value
         *
         * @returns {Promise}
         *
         * @example
         * balena.models.release.tags.set(123, 'EDITOR', 'vim');
         *
         * @example
         * balena.models.release.tags.set('7cf02a6', 'EDITOR', 'vim');
         *
         * @example
         * balena.models.release.tags.set(123, 'EDITOR', 'vim', function(error) {
         * 	if (error) throw error;
         * });
         */
        set: tagsModel.set,
        /**
         * @summary Remove a release tag
         * @name remove
         * @public
         * @function
         * @memberof balena.models.release.tags
         *
         * @param {String|Number} commitOrId - release commit (string) or id (number)
         * @param {String} tagKey - tag key
         * @returns {Promise}
         *
         * @example
         * balena.models.release.tags.remove(123, 'EDITOR');
         *
         * @example
         * balena.models.release.tags.remove('7cf02a6', 'EDITOR');
         *
         * @example
         * balena.models.release.tags.remove(123, 'EDITOR', function(error) {
         * 	if (error) throw error;
         * });
         */
        remove: tagsModel.remove,
    });
    return {
        get,
        getAllByApplication,
        getLatestByApplication,
        getWithImageDetails,
        createFromUrl,
        tags,
    };
};
exports.default = getReleaseModel;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeSince = void 0;
const throttle = require("lodash/throttle");
const memoizee = require("memoizee");
const moment = require("moment");
// Because we are using `leading: true` this never returns an undefined result.
// TODO: Remove this casting once the lodash typings get better
const now = throttle(() => moment(), 1000, {
    leading: true,
});
const dateToMoment = memoizee((date) => moment(date), {
    max: 1000,
    primitive: true,
});
const timeSince = (input, suffix = true) => {
    const date = dateToMoment(input);
    // We do this to avoid out-of-sync times causing this to return
    // e.g. 'in a few seconds'.
    // if the date is in the future .min will make it at maximum, the time since now
    // which results in 'a few seconds ago'.
    const time = now();
    return moment.min(time, date).from(time, !suffix);
};
exports.timeSince = timeSince;

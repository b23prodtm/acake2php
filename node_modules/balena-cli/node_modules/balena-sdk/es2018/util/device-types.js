"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDeviceTypeCompatibleWith = exports.isOsArchitectureCompatibleWith = exports.normalizeDeviceType = exports.getBySlug = exports.findBySlug = void 0;
const errors = require("balena-errors");
// copied from the @resin-io/device-types
// because that has the run-time dependency on coffee-script
const find = (array, predicate) => {
    for (const el of array) {
        if (predicate(el)) {
            return el;
        }
    }
};
const includes = (array, el) => array != null && array.indexOf(el) >= 0;
const dtPredicate = (slug) => (deviceType) => deviceType.slug === slug || includes(deviceType.aliases, slug);
const findBySlug = (deviceTypes, slug) => find(deviceTypes, dtPredicate(slug));
exports.findBySlug = findBySlug;
const getBySlug = (deviceTypes, slug) => {
    const deviceType = exports.findBySlug(deviceTypes, slug);
    if (!deviceType) {
        throw new errors.BalenaInvalidDeviceType('No such device type');
    }
    return deviceType;
};
exports.getBySlug = getBySlug;
const normalizeDeviceType = (deviceTypes, slug) => {
    // returns `undefined` in case of invalid slug
    const deviceType = exports.findBySlug(deviceTypes, slug);
    if (deviceType) {
        return deviceType.slug;
    }
};
exports.normalizeDeviceType = normalizeDeviceType;
/**
 * device/os architectures that show in the keys are also able to
 * run app containers compiled for the architectures in the values
 * @private
 */
const archCompatibilityMap = {
    aarch64: ['armv7hf', 'rpi'],
    armv7hf: ['rpi'],
};
const isOsArchitectureCompatibleWith = (osArchitecture, applicationArchitecture) => osArchitecture === applicationArchitecture ||
    includes(archCompatibilityMap[osArchitecture], applicationArchitecture);
exports.isOsArchitectureCompatibleWith = isOsArchitectureCompatibleWith;
const isDeviceTypeCompatibleWith = (osDeviceType, targetAppDeviceType) => exports.isOsArchitectureCompatibleWith(osDeviceType.arch, targetAppDeviceType.arch) &&
    !!osDeviceType.isDependent === !!targetAppDeviceType.isDependent;
exports.isDeviceTypeCompatibleWith = isDeviceTypeCompatibleWith;

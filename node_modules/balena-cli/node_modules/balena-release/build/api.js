"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateImage = exports.updateRelease = exports.create = exports.createClient = void 0;
const Bluebird = require("bluebird");
const pinejs_client_request_1 = require("pinejs-client-request");
const models = require("./models");
const MAX_CONCURRENT_REQUESTS = 5;
function createClient(config) {
    return new pinejs_client_request_1.PinejsClientRequest({
        apiPrefix: `${config.apiEndpoint}/v6/`,
        passthrough: {
            headers: {
                Authorization: config.auth,
            },
        },
    });
}
exports.createClient = createClient;
async function create(req) {
    const api = req.client;
    const [user, application] = await Promise.all([
        getUser(api, req.user),
        getApplication(api, req.application),
    ]);
    const release = await createRelease(api, {
        is_created_by__user: user.id,
        belongs_to__application: application.id,
        composition: req.composition,
        commit: req.commit,
        status: 'running',
        source: req.source,
        start_timestamp: new Date(),
    });
    const res = { release, serviceImages: {} };
    await Bluebird.map(Object.entries(req.composition.services), async ([serviceName, serviceDescription]) => {
        const service = await getOrCreateService(api, {
            application: application.id,
            service_name: serviceName,
        });
        const img = await createImage(api, res.release.id, serviceDescription.labels, serviceDescription.environment, {
            is_a_build_of__service: service.id,
            status: 'running',
            start_timestamp: new Date(),
        });
        res.serviceImages[serviceName] = img;
        return service;
    }, {
        concurrency: MAX_CONCURRENT_REQUESTS,
    });
    return res;
}
exports.create = create;
async function updateRelease(api, id, body) {
    return models.update(api, 'release', id, body);
}
exports.updateRelease = updateRelease;
async function updateImage(api, id, body) {
    return models.update(api, 'image', id, body);
}
exports.updateImage = updateImage;
async function getUser(api, id) {
    return models.get(api, 'user', id);
}
async function getApplication(api, id) {
    return models.get(api, 'application', id);
}
async function getOrCreateService(api, body) {
    return models.getOrCreate(api, 'service', body, {
        application: body.application,
        service_name: body.service_name,
    });
}
async function createRelease(api, body) {
    return models.create(api, 'release', body);
}
async function createImage(api, release, labels, envvars, body) {
    const image = await models.create(api, 'image', body);
    const releaseImage = await models.create(api, 'image__is_part_of__release', {
        is_part_of__release: release,
        image: image.id,
    });
    if (labels) {
        await Bluebird.map(Object.entries(labels), ([name, value]) => {
            return models.create(api, 'image_label', {
                release_image: releaseImage.id,
                label_name: name,
                value: (value || '').toString(),
            });
        }, {
            concurrency: MAX_CONCURRENT_REQUESTS,
        });
    }
    if (envvars) {
        await Bluebird.map(Object.entries(envvars), ([name, value]) => {
            return models.create(api, 'image_environment_variable', {
                release_image: releaseImage.id,
                name,
                value: (value || '').toString(),
            });
        }, {
            concurrency: MAX_CONCURRENT_REQUESTS,
        });
    }
    return image;
}
//# sourceMappingURL=api.js.map
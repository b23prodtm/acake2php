"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@oclif/errors");
const { isMSYS2 } = require('qqjs');
const path = require("path");
const qq = require("qqjs");
const log_1 = require("../log");
const { fixPath } = require("../util");
let try_install_7zip = true;
async function checkFor7Zip(projectRootPath) {
    let zPaths = [
        fixPath(path.join(projectRootPath, 'node_modules', '7zip', '7zip-lite', '7z.exe')),
        '7z',
    ];
    let foundPath = '';
    for (const zPath of zPaths) {
        try {
            console.log(`probing 7zip at "${zPath}"...`);
            await qq.x(zPath, { stdio: [0, null, 2] });
            foundPath = zPath;
            break;
        }
        catch (err) {}
    }
    if (foundPath) {
        console.log(`found 7zip at "${foundPath}"`);
    } else if (try_install_7zip) {
        try_install_7zip = false;
        console.log(`attempting "npm install 7zip"...`);
        qq.pushd(projectRootPath);
        try {
            await qq.x('npm', ['install', '--no-save', '7zip']);
        } catch (err) {
            errors_1.error('install 7-zip to package windows tarball', true);
        } finally {
            qq.popd();
        }
        return checkFor7Zip(projectRootPath);
    } else {
        errors_1.error('install 7-zip to package windows tarball', true);
    }
    return foundPath;
}
async function fetchNodeBinary({ nodeVersion, output, platform, arch, tmp, projectRootPath }) {

    console.log(`fetchNodeBinary using tmp="${tmp}`);

    if (arch === 'arm')
        arch = 'armv7l';
    let nodeBase = `node-v${nodeVersion}-${platform}-${arch}`;
    let tarball = path.join(tmp, 'node', `${nodeBase}.tar.xz`);
    let url = `https://nodejs.org/dist/v${nodeVersion}/${nodeBase}.tar.xz`;
    let zPath = '';
    if (platform === 'win32') {
        zPath = await checkFor7Zip(projectRootPath);
        nodeBase = `node-v${nodeVersion}-win-${arch}`;
        tarball = path.join(tmp, 'node', `${nodeBase}.7z`);
        url = `https://nodejs.org/dist/v${nodeVersion}/${nodeBase}.7z`;
        output += '.exe';
    }
    let cache = path.join(tmp, 'cache', `node-v${nodeVersion}-${platform}-${arch}`);
    if (platform === 'win32')
        cache += '.exe';
    const download = async () => {
        log_1.log(`downloading ${nodeBase}`);
        const shasums = path.join(tmp, 'cache', nodeVersion, 'SHASUMS256.txt.asc');
        if (!await qq.exists(shasums)) {
            await qq.download(`https://nodejs.org/dist/v${nodeVersion}/SHASUMS256.txt.asc`, shasums);
        }
        const basedir = path.dirname(tarball);
        await qq.mkdirp(basedir);
        await qq.download(url, tarball);
        const shaCmd = isMSYS2 ? 'sha256sum -c -' : 'shasum -a 256 -c -';
        await qq.x(`grep ${path.basename(tarball)} ${fixPath(shasums)} | ${shaCmd}`, { cwd: basedir });
    };
    const extract = async () => {
        log_1.log(`extracting ${nodeBase}`);
        const nodeTmp = path.join(tmp, 'node');
        await qq.rm([nodeTmp, nodeBase]);
        await qq.mkdirp(nodeTmp);
        await qq.mkdirp(path.dirname(cache));
        if (platform === 'win32') {
            qq.pushd(nodeTmp);
            await qq.x(`"${zPath}" x -bd -y ${fixPath(tarball)} > /dev/null`);
            await qq.mv([nodeBase, 'node.exe'], cache);
            qq.popd();
        }
        else {
            await qq.x(`tar -C ${tmp}/node -xJf ${tarball}`);
            await qq.mv([nodeTmp, nodeBase, 'bin/node'], cache);
        }
    };
    if (await qq.exists(cache)) {
        await qq.cp(cache, output);
    }
    else {
        await download();
        await extract();
        await qq.cp(cache, output);
    }
    return output;
}
exports.fetchNodeBinary = fetchNodeBinary;

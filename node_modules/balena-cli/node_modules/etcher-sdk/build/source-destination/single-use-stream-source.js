"use strict";
/*
 * Copyright 2018 balena.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const source_destination_1 = require("./source-destination");
const errors_1 = require("../errors");
const stream_limiter_1 = require("../stream-limiter");
class SingleUseStreamSource extends source_destination_1.SourceDestination {
    constructor(stream) {
        super();
        this.stream = stream;
        this.used = false;
    }
    canCreateReadStream() {
        return __awaiter(this, void 0, void 0, function* () {
            return !this.used;
        });
    }
    createReadStream(_emitProgress = false, start = 0, end) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.used) {
                throw new errors_1.NotCapable('Single use source stream already used');
            }
            if (start !== 0) {
                throw new errors_1.NotCapable("Can't seek in a single use stream");
            }
            let stream = this.stream;
            if (end !== undefined) {
                stream = new stream_limiter_1.StreamLimiter(stream, end + 1);
            }
            this.used = true;
            return stream;
        });
    }
}
exports.SingleUseStreamSource = SingleUseStreamSource;
//# sourceMappingURL=single-use-stream-source.js.map
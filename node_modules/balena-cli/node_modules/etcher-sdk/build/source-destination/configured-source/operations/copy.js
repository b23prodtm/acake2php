"use strict";
/*
 * Copyright 2018 balena.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = require("bluebird");
const _ = require("lodash");
const resin_image_fs_1 = require("resin-image-fs");
const copy = (sourceFs, sourcePath, destinationFs, destinationPath) => __awaiter(void 0, void 0, void 0, function* () {
    const readStream = sourceFs.createReadStream(`/${sourcePath}`);
    const writeStream = destinationFs.createWriteStream(`/${destinationPath}`);
    yield new Promise((resolve, reject) => {
        readStream
            .on('error', reject)
            .pipe(writeStream)
            .on('error', reject)
            .on('close', resolve);
    });
});
exports.execute = (operation, disk) => __awaiter(void 0, void 0, void 0, function* () {
    const source = _.get(operation, 'from.partition');
    const destination = _.get(operation, 'to.partition');
    if (_.isUndefined(source) || _.isUndefined(destination)) {
        throw new Error('copy operation needs from and to properties');
    }
    if (source === destination) {
        yield bluebird_1.using(resin_image_fs_1.interact(disk, source), (fs) => __awaiter(void 0, void 0, void 0, function* () {
            yield copy(fs, operation.from.path, fs, operation.to.path);
        }));
    }
    else {
        yield bluebird_1.using(resin_image_fs_1.interact(disk, source), resin_image_fs_1.interact(disk, destination), (sourceFs, destinationFs) => __awaiter(void 0, void 0, void 0, function* () {
            yield copy(sourceFs, operation.from.path, destinationFs, operation.to.path);
        }));
    }
});
//# sourceMappingURL=copy.js.map
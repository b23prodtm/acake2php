import { Readable } from 'readable-stream';
import { File } from './source-destination/file';
export declare class BlockReadStream extends Readable {
    private source;
    private bytesRead;
    private end;
    private maxRetries;
    private chunkSize;
    constructor(source: File, bytesRead?: number, end?: number, chunkSize?: number, maxRetries?: number);
    private tryRead;
    private __read;
    _read(): void;
}
export declare const ProgressBlockReadStream: {
    new (...args: any[]): {
        _attributeValue: number;
        _attributeDelta: number;
        addListener(event: string | symbol, listener: Function): any;
        on(event: string | symbol, listener: Function): any;
        once(event: string | symbol, listener: Function): any;
        prependListener(event: string | symbol, listener: Function): any;
        prependOnceListener(event: string | symbol, listener: Function): any;
        removeListener(event: string | symbol, listener: Function): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(event: string | symbol): Function[];
        emit(event: string | symbol, ...args: any[]): boolean;
        eventNames(): (string | symbol)[];
        listenerCount(type: string | symbol): number;
    };
} & typeof BlockReadStream;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissiveVarList = void 0;
const t = require("io-ts");
const _ = require("lodash");
const stringRegex = /([^\s=]+?)=(.+)/;
const validate = (value) => {
    if (_.isArray(value)) {
        return validateStringArray(value);
    }
    else if (_.isObject(value)) {
        return _.every(value, (v, k) => {
            return _.isString(v) && _.isString(k);
        });
    }
    return false;
};
const convert = (value) => {
    if (!validate(value)) {
        return;
    }
    if (_.isArray(value)) {
        const varList = {};
        _.each(value, str => {
            const match = str.match(stringRegex);
            if (match == null) {
                return;
            }
            varList[match[1]] = match[2];
        });
        return varList;
    }
    else {
        return value;
    }
};
exports.PermissiveVarList = new t.Type('VarList', validate, (u, ctx) => {
    const value = convert(u);
    if (value != null) {
        return t.success(value);
    }
    return t.failure('Invalid variable list', ctx);
}, () => {
    throw new Error('Encode not implemented for type VarList');
});
function validateStringArray(arr) {
    if (!_.every(arr, a => _.isString(a))) {
        return false;
    }
    return _.every(arr, a => stringRegex.test(a));
}
//# sourceMappingURL=varlist.js.map
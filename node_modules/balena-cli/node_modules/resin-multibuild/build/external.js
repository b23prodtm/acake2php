"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pullExternal = void 0;
const Bluebird = require("bluebird");
const docker_progress_1 = require("docker-progress");
const _ = require("lodash");
const errors_1 = require("./errors");
const local_image_1 = require("./local-image");
const registry_secrets_1 = require("./registry-secrets");
const hasImageTag = (name) => {
    const tagRegex = /^.+:[^/]+$/;
    return tagRegex.test(name);
};
function pullExternal(task, docker) {
    const dockerProgress = new docker_progress_1.DockerProgress();
    dockerProgress.docker.modem = docker.modem;
    const progressHook = _.isFunction(task.progressHook)
        ? task.progressHook
        : _.noop;
    if (task.imageName == null) {
        throw new errors_1.BuildProcessError('No image name given for an external image');
    }
    let imageName = task.imageName;
    if (!hasImageTag(imageName)) {
        imageName += ':latest';
    }
    const opts = task.dockerOpts || {};
    let authConfigPromise = {};
    if (opts.registryconfig) {
        authConfigPromise = registry_secrets_1.getAuthConfigObj(imageName, opts.registryconfig);
    }
    const startTime = Date.now();
    return Bluebird.resolve(authConfigPromise)
        .then((authConfig) => {
        if (authConfig && Object.keys(authConfig).length > 0) {
            opts.authconfig = authConfig;
        }
        return dockerProgress.pull(imageName, progressHook, opts);
    })
        .then(() => {
        const image = new local_image_1.LocalImage(docker, imageName, task.serviceName, {
            external: true,
            successful: true,
        });
        image.startTime = startTime;
        image.endTime = Date.now();
        image.projectType = 'external service';
        return image;
    })
        .catch(e => {
        const image = new local_image_1.LocalImage(docker, null, task.serviceName, {
            external: true,
            successful: false,
        });
        image.error = e;
        image.startTime = startTime;
        image.endTime = Date.now();
        image.projectType = 'external service';
        return image;
    });
}
exports.pullExternal = pullExternal;
//# sourceMappingURL=external.js.map
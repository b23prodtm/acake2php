"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthConfigObj = exports.addCanonicalDockerHubEntry = exports.RegistrySecretValidator = void 0;
const ajv = require("ajv");
const DockerToolbelt = require("docker-toolbelt");
const errors_1 = require("./errors");
var errors_2 = require("./errors");
Object.defineProperty(exports, "RegistrySecretValidationError", { enumerable: true, get: function () { return errors_2.RegistrySecretValidationError; } });
const CANONICAL_HUB_URL = 'https://index.docker.io/v1/';
class RegistrySecretValidator {
    constructor() {
        this.registrySecretJsonSchema = {
            type: 'object',
            patternProperties: {
                '^\\S*$': {
                    type: 'object',
                    properties: {
                        username: { type: 'string' },
                        password: { type: 'string' },
                    },
                    additionalProperties: false,
                },
            },
            additionalProperties: false,
        };
        this.validator = new ajv();
        this.validateFunction = this.validator.compile(this.registrySecretJsonSchema);
    }
    validateRegistrySecrets(parsedJson) {
        const valid = this.validateFunction(parsedJson);
        if (!valid) {
            throw new errors_1.RegistrySecretValidationError(this.validator.errorsText(this.validateFunction.errors));
        }
        return parsedJson;
    }
    parseRegistrySecrets(json) {
        const secrets = JSON.parse(json);
        return this.validateRegistrySecrets(secrets);
    }
}
exports.RegistrySecretValidator = RegistrySecretValidator;
function addCanonicalDockerHubEntry(registryconfig) {
    if (CANONICAL_HUB_URL in registryconfig) {
        return;
    }
    const hubDomains = [
        'index.docker.io',
        'idx.docker.io',
        'docker.io',
        'cloud.docker.com',
        'hub.docker.com',
        'docker.com',
    ];
    outer: for (const hubDomain of hubDomains) {
        for (const registryDomain of Object.keys(registryconfig)) {
            if (registryDomain === '' ||
                registryDomain.match(new RegExp(`(^|https?://)${hubDomain}($|/.*)`))) {
                registryconfig[CANONICAL_HUB_URL] = registryconfig[registryDomain];
                break outer;
            }
        }
    }
}
exports.addCanonicalDockerHubEntry = addCanonicalDockerHubEntry;
function getAuthConfigObj(imageName, registryconfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const { registry } = yield new DockerToolbelt({}).getRegistryAndName(imageName);
        if (registry) {
            return registryconfig[registry] || {};
        }
        else {
            return registryconfig[CANONICAL_HUB_URL] || {};
        }
    });
}
exports.getAuthConfigObj = getAuthConfigObj;
//# sourceMappingURL=registry-secrets.js.map
/// <reference types="node" />
import * as Dockerode from 'dockerode';
import * as Compose from 'resin-compose-parse';
import * as Stream from 'stream';
import { BalenaYml, ParsedBalenaYml, SecretsPopulationMap } from './build-secrets';
import { BuildTask } from './build-task';
import { LocalImage } from './local-image';
import * as PathUtils from './path-utils';
import { RegistrySecrets } from './registry-secrets';
import { ResolveListeners } from './resolve';
export { QEMU_BIN_NAME } from './build-metadata';
export * from './build-task';
export * from './errors';
export * from './local-image';
export * from './registry-secrets';
export { BalenaYml, ParsedBalenaYml };
export { PathUtils };
export { ResolveListeners };
export declare function splitBuildStream(composition: Compose.Composition, buildStream: Stream.Readable): Promise<BuildTask[]>;
export declare function fromImageDescriptors(images: Compose.ImageDescriptor[], buildStream: Stream.Readable, metadataDirectories?: string[]): Promise<BuildTask[]>;
export declare function buildHasSecrets(tasks: BuildTask[]): boolean;
export declare function performResolution(tasks: BuildTask[], architecture: string, deviceType: string, resolveListeners: ResolveListeners, additionalTemplateVars?: Dictionary<string>, dockerfilePreprocessHook?: (dockerfile: string) => string): BuildTask[];
export declare function performSingleResolution(task: BuildTask, architecture: string, deviceType: string, resolveListeners: ResolveListeners, additionalTemplateVars?: Dictionary<string>, dockerfilePreprocessHook?: (dockerfile: string) => string): BuildTask;
export declare function performBuilds(tasks: BuildTask[], docker: Dockerode, tmpDir: string): Promise<LocalImage[]>;
export declare function initializeBuildMetadata(tasks: BuildTask[], docker: Dockerode, tmpDir: string): Promise<{
    secrets: SecretsPopulationMap;
    regSecrets: RegistrySecrets;
    architecture: string;
}>;
export declare function performSingleBuild(task: BuildTask, docker: Dockerode, registrySecrets: RegistrySecrets, secretMap?: SecretsPopulationMap, buildArgs?: Dictionary<string>): Promise<LocalImage>;

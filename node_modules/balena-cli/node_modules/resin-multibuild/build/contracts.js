"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkContractNamesUnique = exports.processContract = exports.isContractFile = exports.CONTRACT_TYPE = void 0;
const jsYaml = require("js-yaml");
const _ = require("lodash");
const TarUtils = require("tar-utils");
const errors_1 = require("./errors");
exports.CONTRACT_TYPE = 'sw.container';
function isContractFile(filename) {
    const normalized = TarUtils.normalizeTarEntry(filename);
    return normalized === 'contract.yml' || normalized === 'contract.yaml';
}
exports.isContractFile = isContractFile;
function processContract(buffer) {
    const parsedBuffer = jsYaml.safeLoad(buffer.toString('utf8'));
    if (parsedBuffer == null || typeof parsedBuffer !== 'object') {
        throw new errors_1.ContractValidationError('Container contract must be an object');
    }
    const contractObj = parsedBuffer;
    if (contractObj.name == null) {
        throw new errors_1.ContractValidationError('Container contract must have a name field');
    }
    if (contractObj.type == null) {
        throw new errors_1.ContractValidationError('Container contract must have a type field');
    }
    if (contractObj.type !== exports.CONTRACT_TYPE) {
        throw new errors_1.ContractValidationError(`Container contract must have a type of ${exports.CONTRACT_TYPE}`);
    }
    if (contractObj.slug == null) {
        throw new errors_1.ContractValidationError('Container contract must have a slug field');
    }
    return contractObj;
}
exports.processContract = processContract;
function checkContractNamesUnique(tasks) {
    const foundNames = {};
    let unique = true;
    tasks.forEach(t => {
        if (t.contract != null) {
            const name = t.contract.name;
            if (name in foundNames) {
                foundNames[name].push(t.serviceName);
                unique = false;
            }
            else {
                foundNames[name] = [t.serviceName];
            }
        }
    });
    if (!unique) {
        throw new errors_1.NonUniqueContractNameError(_.pickBy(foundNames, names => names.length > 1));
    }
}
exports.checkContractNamesUnique = checkContractNamesUnique;
//# sourceMappingURL=contracts.js.map
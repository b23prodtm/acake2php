"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractValidationError = exports.NonUniqueContractNameError = exports.MultipleContractsForService = exports.ContractError = exports.MultipleBalenaConfigFilesError = exports.MultipleMetadataDirectoryError = exports.UnsupportedDockerArchError = exports.SecretRemovalError = exports.SecretPopulationError = exports.BuildSecretMissingError = exports.BalenaYMLValidationError = exports.RegistrySecretValidationError = exports.DockerCommunicationError = exports.BuildProcessError = exports.TarError = exports.ImageRemovalError = void 0;
const _ = require("lodash");
const typed_error_1 = require("typed-error");
class ImageRemovalError extends typed_error_1.TypedError {
}
exports.ImageRemovalError = ImageRemovalError;
class TarError extends typed_error_1.TypedError {
}
exports.TarError = TarError;
class BuildProcessError extends typed_error_1.TypedError {
}
exports.BuildProcessError = BuildProcessError;
class DockerCommunicationError extends typed_error_1.TypedError {
}
exports.DockerCommunicationError = DockerCommunicationError;
class RegistrySecretValidationError extends typed_error_1.TypedError {
}
exports.RegistrySecretValidationError = RegistrySecretValidationError;
class BalenaYMLValidationError extends typed_error_1.TypedError {
}
exports.BalenaYMLValidationError = BalenaYMLValidationError;
class BuildSecretMissingError extends typed_error_1.TypedError {
}
exports.BuildSecretMissingError = BuildSecretMissingError;
class SecretPopulationError extends typed_error_1.TypedError {
}
exports.SecretPopulationError = SecretPopulationError;
class SecretRemovalError extends typed_error_1.TypedError {
}
exports.SecretRemovalError = SecretRemovalError;
class UnsupportedDockerArchError extends typed_error_1.TypedError {
}
exports.UnsupportedDockerArchError = UnsupportedDockerArchError;
class MultipleMetadataDirectoryError extends typed_error_1.TypedError {
}
exports.MultipleMetadataDirectoryError = MultipleMetadataDirectoryError;
class MultipleBalenaConfigFilesError extends typed_error_1.TypedError {
    constructor(filesFound) {
        super();
        this.filesFound = filesFound;
    }
}
exports.MultipleBalenaConfigFilesError = MultipleBalenaConfigFilesError;
class ContractError extends typed_error_1.TypedError {
}
exports.ContractError = ContractError;
class MultipleContractsForService extends ContractError {
    constructor(serviceName) {
        super(`Multiple contracts found for service ${serviceName}`);
        this.serviceName = serviceName;
    }
}
exports.MultipleContractsForService = MultipleContractsForService;
class NonUniqueContractNameError extends ContractError {
    constructor(nonUniqueNames) {
        super();
        this.nonUniqueNames = nonUniqueNames;
        let message = 'Some services have the same contract name, which must be unique:\n';
        _.each(nonUniqueNames, (serviceNames, name) => {
            message += `  ${name}: ${serviceNames.join(', ')}`;
        });
        this.message = message;
    }
}
exports.NonUniqueContractNameError = NonUniqueContractNameError;
class ContractValidationError extends ContractError {
}
exports.ContractValidationError = ContractValidationError;
//# sourceMappingURL=errors.js.map
"use strict";
/*
    Copyright 2017 Balena Ltd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.HUPActionHelper = void 0;
var tslib_1 = require("tslib");
var bSemver = require("balena-semver");
var config_1 = require("./config");
var config_2 = require("./config");
Object.defineProperty(exports, "actionsConfig", { enumerable: true, get: function () { return config_2.actionsConfig; } });
tslib_1.__exportStar(require("./types"), exports);
// ensure `version` is not a `dev` variant
var isDevVariant = function (semver) {
    return tslib_1.__spreadArrays(semver.build, semver.prerelease).includes('dev');
};
var HUPActionHelper = /** @class */ (function () {
    function HUPActionHelper(actionsConfig) {
        if (actionsConfig === void 0) { actionsConfig = config_1.actionsConfig; }
        this.actionsConfig = actionsConfig;
    }
    /**
     * @summary Returns the resinhup type based on device type, current and target balenaOS versions
     * @name getHUPActionType
     * @public
     * @function
     * @memberof HUPActionHelper
     *
     * @description Returns the resinhup type based on device type, current and target balenaOS versions
     *
     *  Currently available types are:
     *   - resinhup11
     *   - resinhup12
     *   - balenahup
     *
     *  For a more detailed list of supported actions per device type check config.ts
     *
     *  Throws error in any of these cases:
     *   - Current or target versions are invalid
     *   - Current or target versions do not match in dev/prod type
     *   - Current and target versions imply a downgrade operation
     *   - Action is not supported by device type
     *
     * @param {String} deviceType - device type slug
     * @param {String} currentVersion - the current semver balenaOS version on the device
     * @param {String} targetVersion - the target semver balenaOS version
     *
     * @returns {String}
     *
     * @example
     * hupActionHelper.getHUPActionType('raspberrypi3', '2.0.0+rev1.prod', '2.2.0+rev1.prod');
     */
    HUPActionHelper.prototype.getHUPActionType = function (deviceType, currentVersion, targetVersion) {
        var currentVersionParsed = bSemver.parse(currentVersion);
        if (currentVersionParsed == null) {
            throw new Error('Invalid current balenaOS version');
        }
        var targetVersionParsed = bSemver.parse(targetVersion);
        if (targetVersionParsed == null) {
            throw new Error('Invalid target balenaOS version');
        }
        if (currentVersionParsed.prerelease.length > 0 ||
            targetVersionParsed.prerelease.length > 0) {
            throw new Error('Updates cannot be performed on pre-release balenaOS versions');
        }
        if (isDevVariant(currentVersionParsed) !== isDevVariant(targetVersionParsed)) {
            throw new Error('Updates cannot be performed between development and production balenaOS variants');
        }
        if (bSemver.lt(targetVersion, currentVersion)) {
            throw new Error('OS downgrades are not allowed');
        }
        if (bSemver.compare(currentVersion, targetVersion) === 0) {
            throw new Error('Current OS version matches Target OS version');
        }
        var fromMajor = currentVersionParsed.major;
        var toMajor = targetVersionParsed.major;
        var actionName;
        if (fromMajor === 1) {
            switch (toMajor) {
                case 1:
                    actionName = 'resinhup11';
                    break;
                case 2:
                    actionName = 'resinhup12';
                    break;
                default:
                    throw new Error("This update request cannot be performed from " + currentVersion + " to " + targetVersion);
            }
        }
        else {
            actionName = 'balenahup';
        }
        var actionsConfig = this.actionsConfig;
        var defaultActions = actionsConfig.deviceTypesDefaults;
        var deviceActions = actionsConfig.deviceTypes[deviceType] || {};
        if (defaultActions[actionName] == null &&
            deviceActions[actionName] == null) {
            throw new Error("This update request cannot be performed on '" + deviceType + "'");
        }
        var _a = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, actionsConfig.actions[actionName]), defaultActions[actionName]), deviceActions[actionName]), minSourceVersion = _a.minSourceVersion, targetMajorVersion = _a.targetMajorVersion, minTargetVersion = _a.minTargetVersion, maxTargetVersion = _a.maxTargetVersion;
        if (bSemver.lt(currentVersion, minSourceVersion)) {
            throw new Error("Current OS version must be >= " + minSourceVersion);
        }
        // If there's a major version constraint for the given action, take it into account
        if (targetMajorVersion &&
            bSemver.major(targetVersion) !== targetMajorVersion) {
            throw new Error("Target OS version must be of major version " + targetMajorVersion);
        }
        if (bSemver.lt(targetVersion, minTargetVersion)) {
            throw new Error("Target OS version must be >= " + minTargetVersion);
        }
        if (maxTargetVersion && bSemver.gte(targetVersion, maxTargetVersion)) {
            throw new Error("Target OS version must be < " + maxTargetVersion);
        }
        return actionName;
    };
    /**
     * @summary Returns whether the provided device type supports OS updates between the current and target balenaOS versions
     * @name isSupportedOsUpdate
     * @public
     * @function
     * @memberof HUPActionHelper
     *
     * @param {String} deviceType - device type slug
     * @param {String} currentVersion - the current semver balenaOS version on the device
     * @param {String} targetVersion - the target semver balenaOS version
     *
     * @returns {Boolean}
     *
     * @example
     * hupActionHelper.isSupportedOsUpdate('raspberrypi3', '2.0.0+rev1.prod', '2.2.0+rev1.prod');
     */
    HUPActionHelper.prototype.isSupportedOsUpdate = function (deviceType, currentVersion, targetVersion) {
        try {
            return !!this.getHUPActionType(deviceType, currentVersion, targetVersion);
        }
        catch (err) {
            return false;
        }
    };
    return HUPActionHelper;
}());
exports.HUPActionHelper = HUPActionHelper;
//# sourceMappingURL=index.js.map
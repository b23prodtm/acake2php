/// <reference types="inquirer" />
/// <reference types="node" />
/**
 * @module dynamiclist
 */
import * as Bluebird from 'bluebird';
import UI = require('inquirer/lib/ui/baseUI');
declare const _default: {
    new (options: import("inquirer").ListQuestionOptions<import("inquirer").Answers> & {
        emptyMessage?: string | undefined;
    }): {
        options: import("inquirer").ListQuestionOptions<import("inquirer").Answers> & {
            emptyMessage: string;
        };
        ui: UI;
        /**
         * @summary Check if the list is empty
         * @method
         * @private
         *
         * @returns {Boolean} whether is empty
         *
         * @example
         * list = new DynamicList
         * 	message: 'Foo'
         * 	emptyMessage: 'Nothing to show'
         * 	choices: [
         * 		name: 'Foo'
         * 		value: 'foo'
         * 	]
         *
         * if list.isEmpty()
         * 	console.log('The list is empty')
         */
        isEmpty(): boolean;
        /**
         * @summary Event listener for when a choice is selected
         * @method
         * @private
         */
        onSubmit(value: any): void;
        /**
         * @summary Render the list
         * @method
         * @public
         *
         * @example
         * list = new DynamicList
         * 	message: 'Foo'
         * 	emptyMessage: 'Nothing to show'
         * 	choices: [
         * 		name: 'Foo'
         * 		value: 'foo'
         * 	]
         *
         * list.render()
         */
        render(): void;
        /**
         * @summary Add a choice
         * @method
         * @public
         *
         * @param {Object} choice - choice
         *
         * @example
         * list = new DynamicList
         * 	message: 'Foo'
         * 	emptyMessage: 'Nothing to show'
         * 	choices: [
         * 		name: 'Foo'
         * 		value: 'foo'
         * 	]
         *
         * list.addChoice(name: 'Bar', value: 'bar')
         * list.render()
         */
        addChoice(choice: import("inquirer/lib/objects/separator") | import("inquirer/lib/objects/choice")<import("inquirer").Answers>): number;
        /**
         * @summary Remove a choice
         * @method
         * @public
         *
         * @param {Object} choice - choice
         *
         * @example
         * list = new DynamicList
         * 	message: 'Foo'
         * 	emptyMessage: 'Nothing to show'
         * 	choices: [
         * 		name: 'Foo'
         * 		value: 'foo'
         * 	]
         *
         * list.removeChoice(name: 'Foo', value: 'foo')
         * list.render()
         */
        removeChoice(choice: import("inquirer/lib/objects/separator") | import("inquirer").SeparatorOptions | import("inquirer/lib/objects/choice")<import("inquirer").Answers> | import("inquirer").ChoiceOptions<import("inquirer").Answers> | import("inquirer").ListChoiceOptions<import("inquirer").Answers> | import("inquirer").ExpandChoiceOptions<import("inquirer").Answers> | import("inquirer").CheckboxChoiceOptions<import("inquirer").Answers>): void;
        /**
         * @summary Run the widget
         * @method
         * @public
         *
         * @fulfil {String} answer
         * @returns {Promise}
         *
         * @example
         * list = new DynamicList
         * 	message: 'Foo'
         * 	emptyMessage: 'Nothing to show'
         * 	choices: [
         * 		name: 'Foo'
         * 		value: 'foo'
         * 	]
         *
         * list.run().then (answer) ->
         * 	console.log(answer)
         */
        run(): Bluebird<any>;
        done: (value: any) => void;
        firstRender: boolean;
        selected: number;
        paginator: import("inquirer/lib/utils/paginator");
        getCurrentValue(): any;
        onUpKey(): void;
        onDownKey(): void;
        onNumberKey(input: number): void;
        status: "idle" | "loading" | "done" | "pending" | (string & {}) | "answered";
        answers: import("inquirer").Answers;
        opt: import("inquirer").prompts.PromptOptions<import("inquirer").ListQuestionOptions<import("inquirer").Answers>>;
        rl: import("readline").Interface;
        screen: import("inquirer/lib/utils/screen-manager");
        _run(callback: (callback: any) => void): void;
        throwParamError(name: string): void;
        close(): void;
        handleSubmitEvents<T>(observable: import("rxjs").Observable<T>): import("inquirer").prompts.PromptEventPipes<T>;
        getQuestion(): string;
    };
};
export = _default;

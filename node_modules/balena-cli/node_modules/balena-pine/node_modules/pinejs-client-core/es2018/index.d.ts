export interface Dictionary<T> {
    [index: string]: T;
}
interface PollOnObj {
    unsubscribe: () => void;
}
declare class Poll<T extends PromiseResultTypes> {
    private intervalTime;
    private subscribers;
    private stopped;
    private pollInterval?;
    private requestFn;
    constructor(requestFn: () => Promise<T>, intervalTime?: number);
    setPollInterval(intervalTime: number): void;
    runRequest(): Promise<void>;
    on(name: 'data', fn: (response: Promise<T>) => void): PollOnObj;
    on(name: 'error', fn: (err: any) => void): PollOnObj;
    start(): void;
    stop(): void;
    destroy(): void;
    private restartTimeout;
}
export declare type PreparedFn<T extends Dictionary<ParameterAlias>, U> = (parameterAliases?: T, body?: Params['body'], passthrough?: Params['passthrough']) => U;
export declare abstract class PinejsClientCore<PinejsClient> {
    apiPrefix: string;
    passthrough: AnyObject;
    passthroughByMethod: AnyObject;
    backendParams: AnyObject;
    constructor(params: string | Params);
    clone(params: string | Params, backendParams?: AnyObject): PinejsClient;
    get(params: Params & {
        options: {
            $count: NonNullable<ODataOptions['$count']>;
        };
    }): Promise<number>;
    get(params: Params & {
        id: NonNullable<Params['id']>;
    }): Promise<AnyObject | undefined>;
    get(params: Omit<Params, 'id'>): Promise<AnyObject[]>;
    protected transformGetResult(params: Params & {
        options: {
            $count: NonNullable<ODataOptions['$count']>;
        };
    }): (data: AnyObject) => number;
    protected transformGetResult(params: Params & {
        id: NonNullable<Params['id']>;
    }): (data: AnyObject) => AnyObject | undefined;
    protected transformGetResult(params: Omit<Params, 'id'>): (data: AnyObject) => AnyObject[];
    subscribe(params: SubscribeParams & {
        options: {
            $count: NonNullable<ODataOptions['$count']>;
        };
    }): Poll<number>;
    subscribe(params: SubscribeParams & {
        id: NonNullable<SubscribeParams['id']>;
    }): Poll<AnyObject | undefined>;
    subscribe(SubscribeParams: Omit<SubscribeParams, 'id'>): Poll<AnyObject[]>;
    put(params: Params): Promise<void>;
    patch(params: Params): Promise<void>;
    post(params: Params): Promise<AnyObject>;
    delete(params: Params): Promise<void>;
    getOrCreate(params: GetOrCreateParams): Promise<AnyObject>;
    upsert(params: UpsertParams): Promise<undefined | AnyObject>;
    prepare<T extends Dictionary<ParameterAlias>>(params: Params & {
        method?: 'GET';
        options: {
            $count: NonNullable<ODataOptions['$count']>;
        };
    }): PreparedFn<T, Promise<number>>;
    prepare<T extends Dictionary<ParameterAlias>>(params: Params & {
        method?: 'GET';
        id: NonNullable<Params['id']>;
    }): PreparedFn<T, Promise<AnyObject | undefined>>;
    prepare<T extends Dictionary<ParameterAlias>>(params: Omit<Params, 'id'> & {
        method?: 'GET';
    }): PreparedFn<T, Promise<AnyObject[]>>;
    prepare<T extends Dictionary<ParameterAlias>>(params: Params & {
        method?: 'GET';
    }): PreparedFn<T, Promise<PromiseResultTypes>>;
    prepare<T extends Dictionary<ParameterAlias>>(params: Params & {
        method: 'PUT' | 'PATCH' | 'DELETE';
    }): PreparedFn<T, Promise<void>>;
    prepare<T extends Dictionary<ParameterAlias>>(params: Params & {
        method: 'POST';
    }): PreparedFn<T, Promise<AnyObject>>;
    compile(params: Params): string;
    request(params: Params & {
        method?: 'GET';
        options: {
            $count: NonNullable<ODataOptions['$count']>;
        };
    }): Promise<number>;
    request(params: Params & {
        method?: 'GET';
        id: NonNullable<Params['id']>;
    }): Promise<AnyObject | undefined>;
    request(params: Omit<Params, 'id'> & {
        method?: 'GET';
    }): Promise<AnyObject[]>;
    request(params: Params & {
        method?: 'GET';
    }): Promise<PromiseResultTypes>;
    request(params: Params & {
        method: 'PUT' | 'PATCH' | 'DELETE';
    }): Promise<void>;
    request(params: Params & {
        method: 'POST';
    }): Promise<AnyObject>;
    request(params: Params, overrides?: undefined): Promise<PromiseResultTypes | void>;
    abstract _request(params: {
        method: string;
        url: string;
        body?: AnyObject;
    } & AnyObject): Promise<{}>;
}
export declare type PromiseResultTypes = number | AnyObject | AnyObject[] | undefined;
declare type FilterOperationValue = Filter;
declare type FilterFunctionValue = Filter;
export interface FilterObj extends Dictionary<Filter | Lambda | undefined> {
    '@'?: string;
    $raw?: RawFilter;
    $?: string | string[];
    $count?: Filter;
    $and?: Filter;
    $or?: Filter;
    $in?: Filter;
    $not?: Filter;
    $any?: Lambda;
    $all?: Lambda;
    $ne?: FilterOperationValue;
    $eq?: FilterOperationValue;
    $gt?: FilterOperationValue;
    $ge?: FilterOperationValue;
    $lt?: FilterOperationValue;
    $le?: FilterOperationValue;
    $add?: FilterOperationValue;
    $sub?: FilterOperationValue;
    $mul?: FilterOperationValue;
    $div?: FilterOperationValue;
    $mod?: FilterOperationValue;
    $contains?: FilterFunctionValue;
    $endswith?: FilterFunctionValue;
    $startswith?: FilterFunctionValue;
    $length?: FilterFunctionValue;
    $indexof?: FilterFunctionValue;
    $substring?: FilterFunctionValue;
    $tolower?: FilterFunctionValue;
    $toupper?: FilterFunctionValue;
    $trim?: FilterFunctionValue;
    $concat?: FilterFunctionValue;
    $year?: FilterFunctionValue;
    $month?: FilterFunctionValue;
    $day?: FilterFunctionValue;
    $hour?: FilterFunctionValue;
    $minute?: FilterFunctionValue;
    $second?: FilterFunctionValue;
    $fractionalseconds?: FilterFunctionValue;
    $date?: FilterFunctionValue;
    $time?: FilterFunctionValue;
    $totaloffsetminutes?: FilterFunctionValue;
    $now?: FilterFunctionValue;
    $maxdatetime?: FilterFunctionValue;
    $mindatetime?: FilterFunctionValue;
    $totalseconds?: FilterFunctionValue;
    $round?: FilterFunctionValue;
    $floor?: FilterFunctionValue;
    $ceiling?: FilterFunctionValue;
    $isof?: FilterFunctionValue;
    $cast?: FilterFunctionValue;
}
export interface FilterArray extends Array<Filter> {
}
export declare type FilterBaseType = string | number | null | boolean | Date;
export declare type RawFilter = string | [string, ...Filter[]] | {
    $string: string;
    [index: string]: Filter;
};
export interface Lambda {
    $alias: string;
    $expr: Filter;
}
export declare type Filter = FilterObj | FilterArray | FilterBaseType;
export interface ResourceExpand extends Dictionary<ODataOptions> {
}
export declare type Expand = string | ResourceExpand | Array<string | ResourceExpand>;
export declare type OrderBy = string | OrderBy[] | {
    [index: string]: 'asc' | 'desc';
};
export declare type Primitive = null | string | number | boolean | Date;
export declare type ParameterAlias = Primitive;
export interface ODataOptionsWithoutCount {
    $filter?: Filter;
    $expand?: Expand;
    $orderby?: OrderBy;
    $top?: number;
    $skip?: number;
    $select?: string | string[];
    $format?: string;
    [index: string]: undefined | ParameterAlias | string[] | Filter | Expand | OrderBy;
}
export interface ODataOptions extends ODataOptionsWithoutCount {
    $count?: ODataOptionsWithoutCount;
}
export declare type OptionsObject = ODataOptions;
export declare type ODataMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
declare type BaseResourceId = string | number | Date | {
    '@': string;
};
declare type ResourceAlternateKey = {
    [key: string]: BaseResourceId;
};
declare type ResourceId = BaseResourceId | ResourceAlternateKey;
export declare type AnyObject = Dictionary<any>;
export interface Params {
    apiPrefix?: string;
    method?: ODataMethod;
    resource?: string;
    id?: ResourceId;
    url?: string;
    body?: AnyObject;
    passthrough?: AnyObject;
    passthroughByMethod?: {
        [method in ODataMethod]?: AnyObject;
    };
    options?: ODataOptions;
}
export interface SubscribeParams extends Params {
    method?: 'GET';
    pollInterval?: number;
}
export interface GetOrCreateParams extends Omit<Params, 'method'> {
    id: ResourceAlternateKey;
    resource: string;
    body: AnyObject;
}
export interface UpsertParams extends Omit<Params, 'id' | 'method'> {
    id: Dictionary<Primitive>;
    resource: string;
    body: AnyObject;
}
export {};

/*
 * The MIT License
 *
 * Copyright (c) 2016 Juan Cruz Viotti. https://github.com/jviotti
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var m = require('mochainon');
var os = require('os');
var path = require('path');
var hidepath = require('./index');

describe('Hidepath', function() {

  it('should return undefined if no path', function() {
    m.chai.expect(hidepath()).to.be.undefined;
  });

  it('should return undefined if the path is an empty string', function() {
    m.chai.expect(hidepath('')).to.be.undefined;
  });

  it('should return undefined if the path is a string containing only spaces', function() {
    m.chai.expect(hidepath('    ')).to.be.undefined;
  });

  describe('given Windows', function() {

    beforeEach(function() {
      this.osPlatformStub = m.sinon.stub(os, 'platform');
      this.osPlatformStub.returns('win32');
    });

    afterEach(function() {
      this.osPlatformStub.restore();
    });

    it('should prefix the path with an underscore', function() {
      var result = hidepath('hello');
      m.chai.expect(result).to.equal('_hello');
    });

    it('should only prefix the file given an absolute path', function() {
      var result = hidepath(path.join('C:', 'foo', 'bar', 'baz.txt'));
      m.chai.expect(result).to.equal(path.join('C:', 'foo', 'bar', '_baz.txt'));
    });

    it('should only prefix the file given a relative path', function() {
      var result = hidepath(path.join('.', 'foo', 'bar', 'baz.txt'));
      m.chai.expect(result).to.equal(path.join('.', 'foo', 'bar', '_baz.txt'));
    });

    it('should trim the result given a path surrounded by spaces', function() {
      var result = hidepath('   hello   ');
      m.chai.expect(result).to.equal('_hello');
    });

  });

  describe('given Linux', function() {

    beforeEach(function() {
      this.osPlatformStub = m.sinon.stub(os, 'platform');
      this.osPlatformStub.returns('linux');
    });

    afterEach(function() {
      this.osPlatformStub.restore();
    });

    it('should prefix the path with a period', function() {
      var result = hidepath('hello');
      m.chai.expect(result).to.equal('.hello');
    });

    it('should only prefix the file given an absolute path', function() {
      var result = hidepath(path.join('/', 'foo', 'bar', 'baz.txt'));
      m.chai.expect(result).to.equal(path.join('/', 'foo', 'bar', '.baz.txt'));
    });

    it('should only prefix the file given a relative path', function() {
      var result = hidepath(path.join('.', 'foo', 'bar', 'baz.txt'));
      m.chai.expect(result).to.equal(path.join('.', 'foo', 'bar', '.baz.txt'));
    });

    it('should trim the result given a path surrounded by spaces', function() {
      var result = hidepath('   hello   ');
      m.chai.expect(result).to.equal('.hello');
    });

  });

});

/// <reference types="node" />
import * as Bluebird from 'bluebird';
import { Readable, Transform } from 'stream';
import { BufferDiskChunk, DiscardDiskChunk, DiskChunk } from './diskchunk';
import * as fs from './fs';
import { Interval } from './interval-intersection';
import { Range } from './mapped-ranges';
export { BufferDiskChunk, DiscardDiskChunk, DiskChunk, Interval, Range };
export { ReadResult, WriteResult } from './fs';
export declare class DiskStream extends Readable {
    private readonly disk;
    private readonly capacity;
    private position;
    private isReading;
    constructor(disk: Disk, capacity: number, highWaterMark: number, position: number);
    private __read;
    _read(size: number): void;
}
export declare function openFile(path: string, flags: string | number, mode?: number): Bluebird.Disposer<number>;
export declare abstract class Disk {
    readOnly: boolean;
    recordWrites: boolean;
    recordReads: boolean;
    discardIsZero: boolean;
    readonly knownChunks: DiskChunk[];
    capacity: number | null;
    constructor(readOnly?: boolean, recordWrites?: boolean, recordReads?: boolean, discardIsZero?: boolean);
    protected abstract _getCapacity(): Promise<number>;
    protected abstract _read(buffer: Buffer, bufferOffset: number, length: number, fileOffset: number): Promise<fs.ReadResult>;
    protected abstract _write(buffer: Buffer, bufferOffset: number, length: number, fileOffset: number): Promise<fs.WriteResult>;
    protected abstract _flush(): Promise<void>;
    getTransformStream(): Transform;
    read(buffer: Buffer, _bufferOffset: number, length: number, fileOffset: number): Promise<fs.ReadResult>;
    write(buffer: Buffer, bufferOffset: number, length: number, fileOffset: number): Promise<fs.WriteResult>;
    flush(): Promise<void>;
    discard(offset: number, length: number): Promise<void>;
    getCapacity(): Promise<number>;
    getStream(position?: number, length?: number | null, highWaterMark?: number): Promise<DiskStream>;
    getDiscardedChunks(): DiskChunk[];
    getRanges(blockSize: number): Promise<Range[]>;
    private insertDiskChunk;
    private createReadPlan;
    private readAccordingToPlan;
}
export declare class FileDisk extends Disk {
    protected readonly fd: number;
    constructor(fd: number, readOnly?: boolean, recordWrites?: boolean, recordReads?: boolean, discardIsZero?: boolean);
    protected _getCapacity(): Promise<number>;
    protected _read(buffer: Buffer, bufferOffset: number, length: number, fileOffset: number): Promise<fs.ReadResult>;
    protected _write(buffer: Buffer, bufferOffset: number, length: number, fileOffset: number): Promise<fs.WriteResult>;
    protected _flush(): Promise<void>;
}
export declare class BufferDisk extends Disk {
    private readonly buffer;
    constructor(buffer: Buffer, readOnly?: boolean, recordWrites?: boolean, recordReads?: boolean, discardIsZero?: boolean);
    protected _getCapacity(): Promise<number>;
    protected _read(buffer: Buffer, bufferOffset: number, length: number, fileOffset: number): Promise<fs.ReadResult>;
    protected _write(buffer: Buffer, bufferOffset: number, length: number, fileOffset: number): Promise<fs.WriteResult>;
    protected _flush(): Promise<void>;
}

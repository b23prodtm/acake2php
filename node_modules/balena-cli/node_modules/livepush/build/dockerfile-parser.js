"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDockerfile = void 0;
const docker_file_parser_1 = require("docker-file-parser");
const LiveCommandDirective = 'dev-cmd-live';
const RunCommandDirective = 'dev-run';
const CopyCommandDirective = 'dev-copy';
const EnvCommandDirective = 'dev-env';
const EscapeDirective = 'escape';
const InternalLiveCmdMarker = 'livecmd-marker';
function parseDockerfile(content) {
    if (Buffer.isBuffer(content)) {
        content = content.toString();
    }
    let escapeCharacter = '\\';
    let lastNonCommentLine = '';
    const directives = [];
    const nonCommentLines = content
        .split(/\r?\n/)
        .map((line, idx) => {
        const comment = extractComment(line);
        if (comment) {
            const directive = extractDirective(comment, idx + 1);
            if (directive) {
                directives.push(directive.entry);
                if (directive.entry.name === 'ESCAPE') {
                    escapeCharacter = directive.entry.args[0];
                }
                return directive.preserve ? line : '';
            }
            if (lastNonCommentLine.endsWith(escapeCharacter)) {
                return `${escapeCharacter}`;
            }
            return '';
        }
        lastNonCommentLine = line;
        return line;
    })
        .join('\n');
    const commands = docker_file_parser_1.parse(nonCommentLines, { includeComments: false });
    return commands.concat(directives).sort((a, b) => a.lineno - b.lineno);
}
exports.parseDockerfile = parseDockerfile;
function extractComment(line) {
    if (/^\s*#+/.test(line)) {
        return line.replace(/^\s*#+\s*(.*)/, '$1');
    }
    return;
}
const directiveRegex = /([^=]+)=(.+)/;
function extractDirective(comment, lineno) {
    const match = comment.match(directiveRegex);
    if (!match) {
        return;
    }
    const common = {
        args: match[2],
        lineno,
        raw: `#${comment}`,
    };
    switch (match[1].toLowerCase()) {
        case LiveCommandDirective:
            return {
                entry: Object.assign({ name: 'LIVECMD' }, common),
                preserve: false,
            };
        case EscapeDirective:
            return {
                entry: Object.assign({ name: 'ESCAPE' }, common),
                preserve: true,
            };
        case InternalLiveCmdMarker:
            return {
                entry: Object.assign({ name: 'LIVECMD_MARKER' }, common),
                preserve: false,
            };
        case RunCommandDirective:
            return {
                entry: Object.assign({ name: 'LIVERUN' }, common),
                preserve: false,
            };
        case CopyCommandDirective:
            return {
                entry: Object.assign({ name: 'LIVECOPY' }, common),
                preserve: false,
            };
        case EnvCommandDirective:
            return {
                entry: Object.assign({ name: 'LIVEENV' }, common),
                preserve: false,
            };
    }
}
//# sourceMappingURL=dockerfile-parser.js.map
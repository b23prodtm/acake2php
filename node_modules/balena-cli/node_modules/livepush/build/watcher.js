"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupFsWatcher = void 0;
const chokidar = require("chokidar");
const _ = require("lodash");
function setupFsWatcher(livepush, path, opts) {
    var _a, _b;
    const noInit = (_a = opts === null || opts === void 0 ? void 0 : opts.noInit) !== null && _a !== void 0 ? _a : true;
    const executor = getExecutor(livepush, (_b = opts === null || opts === void 0 ? void 0 : opts.debounceWait) !== null && _b !== void 0 ? _b : 200);
    const watcher = chokidar.watch(path, {
        ignoreInitial: noInit,
        ignored: opts === null || opts === void 0 ? void 0 : opts.ignored,
    });
    watcher.on('add', filepath => executor(filepath));
    watcher.on('change', filepath => executor(filepath));
    watcher.on('unlink', filepath => executor(undefined, filepath));
}
exports.setupFsWatcher = setupFsWatcher;
function getExecutor(livepush, debounceWait) {
    const changedFiles = [];
    const deletedFiles = [];
    const actualExecutor = _.debounce(() => __awaiter(this, void 0, void 0, function* () {
        yield livepush.performLivepush(changedFiles, deletedFiles);
        changedFiles.length = 0;
        deletedFiles.length = 0;
    }), debounceWait);
    return (changed, deleted) => {
        if (changed) {
            changedFiles.push(changed);
        }
        if (deleted) {
            deletedFiles.push(deleted);
        }
        actualExecutor();
    };
}
//# sourceMappingURL=watcher.js.map
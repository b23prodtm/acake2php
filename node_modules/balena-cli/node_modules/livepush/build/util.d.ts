/// <reference types="node" />
import * as _ from 'lodash';
import * as Stream from 'stream';
import * as tar from 'tar-stream';
import Container, { CommandExecutionContext } from './container';
export interface LocalCopyTask {
    localSource: string;
    containerPath: string;
}
export declare function streamToBuffer(stream: Stream.Readable): Promise<Buffer>;
export declare function resolveFileLocations(files: string[], destination: string, container: Container): Promise<LocalCopyTask[]>;
export declare const hostPathIsDirectory: ((path: string) => Promise<boolean>) & _.MemoizedFunction;
export declare function addFileToTarPack(pack: tar.Pack, path: string, destination: string): Promise<void>;
export declare enum CommandExecutionArtifactType {
    EXIT_CODE = 0,
    STDOUT_DATA = 1,
    STDERR_DATA = 2
}
export declare type CommandExecutionArtifact = {
    type: CommandExecutionArtifactType.EXIT_CODE;
    code: number;
} | {
    type: CommandExecutionArtifactType.STDERR_DATA | CommandExecutionArtifactType.STDOUT_DATA;
    data: Buffer;
};
export declare function waitForCommandCompletion(executionContext: CommandExecutionContext, cb: (artifact: CommandExecutionArtifact) => void): Promise<void>;

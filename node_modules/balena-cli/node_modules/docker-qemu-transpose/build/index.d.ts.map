{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,OAAO,KAAK,OAAO,MAAM,UAAU,CAAC;AAOpC;;;GAGG;AACH,MAAM,WAAW,gBAAgB;IAChC;;OAEG;IACH,YAAY,EAAE,MAAM,CAAC;IAErB;;OAEG;IACH,iBAAiB,EAAE,MAAM,CAAC;IAE1B;;;OAGG;IACH,YAAY,CAAC,EAAE,MAAM,CAAC;CACtB;AAqGD;;;;;;;GAOG;AACH,wBAAgB,SAAS,CACxB,UAAU,EAAE,MAAM,EAClB,OAAO,EAAE,gBAAgB,GACvB,MAAM,CAgBR;AA+BD;;;;;GAKG;AACH,wBAAgB,kBAAkB,CACjC,SAAS,EAAE,MAAM,CAAC,cAAc,EAChC,OAAO,EAAE,gBAAgB,EACzB,cAAc,GAAE,MAAqB,kCAiBrC;AAED;;;;;;;GAOG;AACH,wBAAgB,qBAAqB,CACpC,IAAI,EAAE,gBAAgB,GACpB,MAAM,CAAC,eAAe,CA2CxB","file":"index.d.ts","sourcesContent":["/**\n * @license\n * Copyright 2017-2019 Balena Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as parser from 'docker-file-parser';\nimport * as jsesc from 'jsesc';\nimport * as _ from 'lodash';\nimport * as tar from 'tar-stream';\nimport { normalizeTarEntry } from 'tar-utils';\n\n/**\n * TransposeOptions:\n * Options to be passed to the transpose module\n */\nexport interface TransposeOptions {\n\t/**\n\t * hostQemuPath: the path of the qemu binary on the host\n\t */\n\thostQemuPath: string;\n\n\t/**\n\t * containerQemuPath: Where to add the qemu binary on-container\n\t */\n\tcontainerQemuPath: string;\n\n\t/**\n\t * Optional file mode (permission) to assign to the Qemu executable,\n\t * e.g. 0o555. Useful on Windows, when Unix-like permissions are lost.\n\t */\n\tqemuFileMode?: number;\n}\n\ninterface Command extends Pick<parser.CommandEntry, 'name' | 'args'> {}\n\ntype CommandTransposer = (\n\toptions: TransposeOptions,\n\tcommand: Command,\n) => Command;\n\nconst generateQemuCopy = (options: TransposeOptions): Command => {\n\treturn {\n\t\tname: 'COPY',\n\t\targs: [options.hostQemuPath, options.containerQemuPath],\n\t};\n};\n\nconst processArgString = (argString: string) => {\n\treturn jsesc(argString, { quotes: 'double' });\n};\n\nconst transposeArrayRun = (\n\toptions: TransposeOptions,\n\tcommand: Command,\n): Command => {\n\tconst args = (command.args as string[]).map(processArgString).join(' ');\n\treturn {\n\t\tname: 'RUN',\n\t\targs: [options.containerQemuPath, '-execve', '/bin/sh', '-c'].concat(args),\n\t};\n};\n\nconst transposeStringRun = (\n\toptions: TransposeOptions,\n\tcommand: Command,\n): Command => {\n\tconst processed = processArgString(command.args as string);\n\treturn {\n\t\tname: 'RUN',\n\t\targs: [options.containerQemuPath, '-execve', '/bin/sh', '-c'].concat([\n\t\t\tprocessed,\n\t\t]),\n\t};\n};\n\nconst transposeRun = (options: TransposeOptions, command: Command): Command => {\n\tif (_.isArray(command.args)) {\n\t\treturn transposeArrayRun(options, command);\n\t}\n\treturn transposeStringRun(options, command);\n};\n\nconst identity = (_options: TransposeOptions, command: Command): Command => {\n\treturn command;\n};\n\nconst commandToTranspose = (command: Command): CommandTransposer => {\n\tif (command.name === 'RUN') {\n\t\treturn transposeRun;\n\t}\n\treturn identity;\n};\n\nconst spaceSeparatedArrayCommands = ['ARG', 'EXPOSE'];\n\nconst argsToString = (\n\targs: string | { [key: string]: string } | string[],\n\tcommandName: string,\n): string => {\n\tif (_.isArray(args)) {\n\t\tlet ret = '';\n\t\t// Handle command meta-arguments (like --from=stage)\n\t\tif (args[0] != null && args[0].startsWith('--')) {\n\t\t\tret += args[0] + ' ';\n\t\t\targs = args.slice(1);\n\t\t}\n\t\tif (spaceSeparatedArrayCommands.includes(commandName)) {\n\t\t\treturn ret + args.join(' ');\n\t\t}\n\t\treturn ret + '[\"' + (args as string[]).join('\",\"') + '\"]';\n\t} else if (_.isObject(args)) {\n\t\treturn _.map(args, (value: string, key: string) => {\n\t\t\tconst escapedValue = JSON.stringify(value);\n\t\t\treturn `${key}=${escapedValue}`;\n\t\t}).join(' ');\n\t} else {\n\t\treturn args as string;\n\t}\n};\n\nconst commandsToDockerfile = (commands: Command[]): string => {\n\tlet dockerfile = '';\n\n\tcommands.map(command => {\n\t\tdockerfile += `${command.name} ${argsToString(\n\t\t\tcommand.args,\n\t\t\tcommand.name,\n\t\t)}\\n`;\n\t});\n\treturn dockerfile;\n};\n\n/**\n * transpose:\n * Given a string representing a dockerfile, transpose it to use qemu\n * rather than native, to enable emulated builds\n *\n * @param dockerfile A string representing the dockerfile\n * @param options Options to use when doing the transposing\n */\nexport function transpose(\n\tdockerfile: string,\n\toptions: TransposeOptions,\n): string {\n\t// parse the Dokerfile\n\tconst commands = parser.parse(dockerfile, { includeComments: false });\n\n\tconst outCommands: Command[] = [];\n\tconst copyCommand = generateQemuCopy(options);\n\tcommands.forEach(c => {\n\t\tif (c.name === 'FROM') {\n\t\t\toutCommands.push(c);\n\t\t\toutCommands.push(copyCommand);\n\t\t} else {\n\t\t\toutCommands.push(commandToTranspose(c)(options, c));\n\t\t}\n\t});\n\n\treturn commandsToDockerfile(outCommands);\n}\n\nconst getTarEntryHandler = (\n\tpack: tar.Pack,\n\tdockerfileName: string,\n\topts: TransposeOptions,\n) => {\n\tconst streamToPromise = require('stream-to-promise');\n\treturn (\n\t\theader: tar.Headers,\n\t\tstream: NodeJS.ReadableStream,\n\t\tnext: (err?: Error) => void,\n\t) => {\n\t\tstreamToPromise(stream)\n\t\t\t.then((buffer: Buffer) => {\n\t\t\t\tconst name = normalizeTarEntry(header.name);\n\t\t\t\tif (name === dockerfileName) {\n\t\t\t\t\tconst newDockerfile = transpose(buffer.toString(), opts);\n\t\t\t\t\tpack.entry({ name: dockerfileName }, newDockerfile);\n\t\t\t\t} else {\n\t\t\t\t\tif (name === opts.hostQemuPath && opts.qemuFileMode) {\n\t\t\t\t\t\theader.mode = opts.qemuFileMode;\n\t\t\t\t\t}\n\t\t\t\t\tpack.entry(header, buffer);\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t})\n\t\t\t.catch(next);\n\t};\n};\n\n/**\n * transposeTarStream: Given a tar stream, this function will extract\n * the files, transpose the Dockerfile using the transpose function,\n * and then re-tar the original contents and the new Dockerfile, and\n * return a new tarStream\n */\nexport function transposeTarStream(\n\ttarStream: NodeJS.ReadableStream,\n\toptions: TransposeOptions,\n\tdockerfileName: string = 'Dockerfile',\n) {\n\tconst extract = tar.extract();\n\tconst pack = tar.pack();\n\n\treturn new Promise<NodeJS.ReadableStream>((resolve, reject) => {\n\t\tpack.on('error', reject);\n\t\textract.on('error', reject);\n\t\textract.on('entry', getTarEntryHandler(pack, dockerfileName, options));\n\n\t\textract.on('finish', () => {\n\t\t\tpack.finalize();\n\t\t\tresolve(pack);\n\t\t});\n\n\t\ttarStream.pipe(extract);\n\t});\n}\n\n/**\n * getBuildThroughStream: Get a through stream, which when piped to will remove all\n * extra output that is added as a result of this module transposing a Dockerfile.\n *\n * This function enables 'silent' emulated builds, with the only difference in output\n * from a native build being that there is an extra COPY step, where the emulator is\n * added to the container\n */\nexport function getBuildThroughStream(\n\topts: TransposeOptions,\n): NodeJS.ReadWriteStream {\n\tconst es = require('event-stream');\n\t// Regex to match against 'Step 1/5:', 'Step 1/5 :' 'Step 1:' 'Step 1 :'\n\t// and all lower case versions.\n\tconst stepLineRegex = /^(?:step)\\s\\d+(?:\\/\\d+)?\\s?:/i;\n\tconst isStepLine = (str: string) => stepLineRegex.test(str);\n\n\t// Function to strip the string matched with the regex above\n\tconst stripStepPrefix = (data: string): string => {\n\t\treturn data.substr(data.indexOf(':') + 1);\n\t};\n\n\t// Regex to match against the type of command, e.g. FROM, RUN, COPY\n\tconst stepCommandRegex = /^\\s?(\\w+)(:?\\s)/i;\n\tconst getStepCommand = (str: string): string => {\n\t\tconst match = stepCommandRegex.exec(str);\n\t\tif (match != null) {\n\t\t\treturn match[1].toUpperCase();\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t};\n\n\t// Regex to remove extra flags which this module adds in\n\tconst replaceRegexString = _.escapeRegExp(\n\t\t`${opts.containerQemuPath} -execve /bin/sh -c `,\n\t);\n\tconst replaceRegex = new RegExp(replaceRegexString, 'i');\n\tconst replaceQemuLine = (data: string): string => {\n\t\treturn data.replace(replaceRegex, '');\n\t};\n\n\treturn es.pipe(\n\t\tes.mapSync(function(data: string | Buffer) {\n\t\t\tdata = data.toString();\n\n\t\t\tif (isStepLine(data) && getStepCommand(stripStepPrefix(data)) === 'RUN') {\n\t\t\t\tdata = replaceQemuLine(data);\n\t\t\t}\n\t\t\treturn data;\n\t\t}),\n\t\tes.join('\\n'),\n\t);\n}\n"],"sourceRoot":"src"}
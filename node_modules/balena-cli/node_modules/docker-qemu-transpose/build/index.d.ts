/**
 * @license
 * Copyright 2017-2019 Balena Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import * as Promise from 'bluebird';
/**
 * TransposeOptions:
 * Options to be passed to the transpose module
 */
export interface TransposeOptions {
    /**
     * hostQemuPath: the path of the qemu binary on the host
     */
    hostQemuPath: string;
    /**
     * containerQemuPath: Where to add the qemu binary on-container
     */
    containerQemuPath: string;
    /**
     * Optional file mode (permission) to assign to the Qemu executable,
     * e.g. 0o555. Useful on Windows, when Unix-like permissions are lost.
     */
    qemuFileMode?: number;
}
/**
 * transpose:
 * Given a string representing a dockerfile, transpose it to use qemu
 * rather than native, to enable emulated builds
 *
 * @param dockerfile A string representing the dockerfile
 * @param options Options to use when doing the transposing
 */
export declare function transpose(dockerfile: string, options: TransposeOptions): string;
/**
 * transposeTarStream: Given a tar stream, this function will extract
 * the files, transpose the Dockerfile using the transpose function,
 * and then re-tar the original contents and the new Dockerfile, and
 * return a new tarStream
 */
export declare function transposeTarStream(tarStream: NodeJS.ReadableStream, options: TransposeOptions, dockerfileName?: string): Promise<NodeJS.ReadableStream>;
/**
 * getBuildThroughStream: Get a through stream, which when piped to will remove all
 * extra output that is added as a result of this module transposing a Dockerfile.
 *
 * This function enables 'silent' emulated builds, with the only difference in output
 * from a native build being that there is an extra COPY step, where the emulator is
 * added to the container
 */
export declare function getBuildThroughStream(opts: TransposeOptions): NodeJS.ReadWriteStream;

{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @license\n * Copyright 2017-2019 Balena Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport * as parser from 'docker-file-parser';\nimport * as jsesc from 'jsesc';\nimport * as _ from 'lodash';\nimport * as tar from 'tar-stream';\nimport { normalizeTarEntry } from 'tar-utils';\n\n/**\n * TransposeOptions:\n * Options to be passed to the transpose module\n */\nexport interface TransposeOptions {\n\t/**\n\t * hostQemuPath: the path of the qemu binary on the host\n\t */\n\thostQemuPath: string;\n\n\t/**\n\t * containerQemuPath: Where to add the qemu binary on-container\n\t */\n\tcontainerQemuPath: string;\n\n\t/**\n\t * Optional file mode (permission) to assign to the Qemu executable,\n\t * e.g. 0o555. Useful on Windows, when Unix-like permissions are lost.\n\t */\n\tqemuFileMode?: number;\n}\n\ninterface Command extends Pick<parser.CommandEntry, 'name' | 'args'> {}\n\ntype CommandTransposer = (\n\toptions: TransposeOptions,\n\tcommand: Command,\n) => Command;\n\nconst generateQemuCopy = (options: TransposeOptions): Command => {\n\treturn {\n\t\tname: 'COPY',\n\t\targs: [options.hostQemuPath, options.containerQemuPath],\n\t};\n};\n\nconst processArgString = (argString: string) => {\n\treturn jsesc(argString, { quotes: 'double' });\n};\n\nconst transposeArrayRun = (\n\toptions: TransposeOptions,\n\tcommand: Command,\n): Command => {\n\tconst args = (command.args as string[]).map(processArgString).join(' ');\n\treturn {\n\t\tname: 'RUN',\n\t\targs: [options.containerQemuPath, '-execve', '/bin/sh', '-c'].concat(args),\n\t};\n};\n\nconst transposeStringRun = (\n\toptions: TransposeOptions,\n\tcommand: Command,\n): Command => {\n\tconst processed = processArgString(command.args as string);\n\treturn {\n\t\tname: 'RUN',\n\t\targs: [options.containerQemuPath, '-execve', '/bin/sh', '-c'].concat([\n\t\t\tprocessed,\n\t\t]),\n\t};\n};\n\nconst transposeRun = (options: TransposeOptions, command: Command): Command => {\n\tif (_.isArray(command.args)) {\n\t\treturn transposeArrayRun(options, command);\n\t}\n\treturn transposeStringRun(options, command);\n};\n\nconst identity = (_options: TransposeOptions, command: Command): Command => {\n\treturn command;\n};\n\nconst commandToTranspose = (command: Command): CommandTransposer => {\n\tif (command.name === 'RUN') {\n\t\treturn transposeRun;\n\t}\n\treturn identity;\n};\n\nconst spaceSeparatedArrayCommands = ['ARG', 'EXPOSE'];\n\nconst argsToString = (\n\targs: string | { [key: string]: string } | string[],\n\tcommandName: string,\n): string => {\n\tif (_.isArray(args)) {\n\t\tlet ret = '';\n\t\t// Handle command meta-arguments (like --from=stage)\n\t\tif (args[0] != null && args[0].startsWith('--')) {\n\t\t\tret += args[0] + ' ';\n\t\t\targs = args.slice(1);\n\t\t}\n\t\tif (spaceSeparatedArrayCommands.includes(commandName)) {\n\t\t\treturn ret + args.join(' ');\n\t\t}\n\t\treturn ret + '[\"' + (args as string[]).join('\",\"') + '\"]';\n\t} else if (_.isObject(args)) {\n\t\treturn _.map(args, (value: string, key: string) => {\n\t\t\tconst escapedValue = JSON.stringify(value);\n\t\t\treturn `${key}=${escapedValue}`;\n\t\t}).join(' ');\n\t} else {\n\t\treturn args as string;\n\t}\n};\n\nconst commandsToDockerfile = (commands: Command[]): string => {\n\tlet dockerfile = '';\n\n\tcommands.map(command => {\n\t\tdockerfile += `${command.name} ${argsToString(\n\t\t\tcommand.args,\n\t\t\tcommand.name,\n\t\t)}\\n`;\n\t});\n\treturn dockerfile;\n};\n\n/**\n * transpose:\n * Given a string representing a dockerfile, transpose it to use qemu\n * rather than native, to enable emulated builds\n *\n * @param dockerfile A string representing the dockerfile\n * @param options Options to use when doing the transposing\n */\nexport function transpose(\n\tdockerfile: string,\n\toptions: TransposeOptions,\n): string {\n\t// parse the Dokerfile\n\tconst commands = parser.parse(dockerfile, { includeComments: false });\n\n\tconst outCommands: Command[] = [];\n\tconst copyCommand = generateQemuCopy(options);\n\tcommands.forEach(c => {\n\t\tif (c.name === 'FROM') {\n\t\t\toutCommands.push(c);\n\t\t\toutCommands.push(copyCommand);\n\t\t} else {\n\t\t\toutCommands.push(commandToTranspose(c)(options, c));\n\t\t}\n\t});\n\n\treturn commandsToDockerfile(outCommands);\n}\n\nconst getTarEntryHandler = (\n\tpack: tar.Pack,\n\tdockerfileName: string,\n\topts: TransposeOptions,\n) => {\n\tconst streamToPromise = require('stream-to-promise');\n\treturn (\n\t\theader: tar.Headers,\n\t\tstream: NodeJS.ReadableStream,\n\t\tnext: (err?: Error) => void,\n\t) => {\n\t\tstreamToPromise(stream)\n\t\t\t.then((buffer: Buffer) => {\n\t\t\t\tconst name = normalizeTarEntry(header.name);\n\t\t\t\tif (name === dockerfileName) {\n\t\t\t\t\tconst newDockerfile = transpose(buffer.toString(), opts);\n\t\t\t\t\tpack.entry({ name: dockerfileName }, newDockerfile);\n\t\t\t\t} else {\n\t\t\t\t\tif (name === opts.hostQemuPath && opts.qemuFileMode) {\n\t\t\t\t\t\theader.mode = opts.qemuFileMode;\n\t\t\t\t\t}\n\t\t\t\t\tpack.entry(header, buffer);\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t})\n\t\t\t.catch(next);\n\t};\n};\n\n/**\n * transposeTarStream: Given a tar stream, this function will extract\n * the files, transpose the Dockerfile using the transpose function,\n * and then re-tar the original contents and the new Dockerfile, and\n * return a new tarStream\n */\nexport function transposeTarStream(\n\ttarStream: NodeJS.ReadableStream,\n\toptions: TransposeOptions,\n\tdockerfileName: string = 'Dockerfile',\n) {\n\tconst extract = tar.extract();\n\tconst pack = tar.pack();\n\n\treturn new Promise<NodeJS.ReadableStream>((resolve, reject) => {\n\t\tpack.on('error', reject);\n\t\textract.on('error', reject);\n\t\textract.on('entry', getTarEntryHandler(pack, dockerfileName, options));\n\n\t\textract.on('finish', () => {\n\t\t\tpack.finalize();\n\t\t\tresolve(pack);\n\t\t});\n\n\t\ttarStream.pipe(extract);\n\t});\n}\n\n/**\n * getBuildThroughStream: Get a through stream, which when piped to will remove all\n * extra output that is added as a result of this module transposing a Dockerfile.\n *\n * This function enables 'silent' emulated builds, with the only difference in output\n * from a native build being that there is an extra COPY step, where the emulator is\n * added to the container\n */\nexport function getBuildThroughStream(\n\topts: TransposeOptions,\n): NodeJS.ReadWriteStream {\n\tconst es = require('event-stream');\n\t// Regex to match against 'Step 1/5:', 'Step 1/5 :' 'Step 1:' 'Step 1 :'\n\t// and all lower case versions.\n\tconst stepLineRegex = /^(?:step)\\s\\d+(?:\\/\\d+)?\\s?:/i;\n\tconst isStepLine = (str: string) => stepLineRegex.test(str);\n\n\t// Function to strip the string matched with the regex above\n\tconst stripStepPrefix = (data: string): string => {\n\t\treturn data.substr(data.indexOf(':') + 1);\n\t};\n\n\t// Regex to match against the type of command, e.g. FROM, RUN, COPY\n\tconst stepCommandRegex = /^\\s?(\\w+)(:?\\s)/i;\n\tconst getStepCommand = (str: string): string => {\n\t\tconst match = stepCommandRegex.exec(str);\n\t\tif (match != null) {\n\t\t\treturn match[1].toUpperCase();\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t};\n\n\t// Regex to remove extra flags which this module adds in\n\tconst replaceRegexString = _.escapeRegExp(\n\t\t`${opts.containerQemuPath} -execve /bin/sh -c `,\n\t);\n\tconst replaceRegex = new RegExp(replaceRegexString, 'i');\n\tconst replaceQemuLine = (data: string): string => {\n\t\treturn data.replace(replaceRegex, '');\n\t};\n\n\treturn es.pipe(\n\t\tes.mapSync(function(data: string | Buffer) {\n\t\t\tdata = data.toString();\n\n\t\t\tif (isStepLine(data) && getStepCommand(stripStepPrefix(data)) === 'RUN') {\n\t\t\t\tdata = replaceQemuLine(data);\n\t\t\t}\n\t\t\treturn data;\n\t\t}),\n\t\tes.join('\\n'),\n\t);\n}\n"],"sourceRoot":"src"}
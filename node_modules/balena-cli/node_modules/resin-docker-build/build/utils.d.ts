/**
 * @license
 * Copyright 2019 Balena Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as Bluebird from 'bluebird';
import * as Plugin from './plugin';
/**
 * Given a docker 'arrow message' containing a sha representing
 * a layer, extract the sha digest. If the string passed in is not
 * an arrow message, undefined will be returned.
 *
 * @param message The build message to parse
 * @returns Either the sha string, or undefined
 */
export declare const extractLayer: (message: string) => string | undefined;
/**
 * Go through an entire directory, splitting the entries out
 * into a list of paths to work through.
 */
export declare const directoryToFiles: (dirPath: string) => Bluebird<string[]>;
export interface FromTagInfo extends Plugin.FromTagInfo {
    alias?: string;
}
export declare const extractFromTag: (message: string) => FromTagInfo | undefined;

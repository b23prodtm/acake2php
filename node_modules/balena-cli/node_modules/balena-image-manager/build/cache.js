"use strict";
/*
Copyright 2016-2020 Balena Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.clean = exports.getImageWritableStream = exports.getImage = exports.isImageFresh = exports.getImagePath = void 0;
const fs = require("fs");
const mkdirp = require("mkdirp");
const balena_sdk_1 = require("balena-sdk");
const mime = require("mime");
const path = require("path");
const utils = require("./utils");
const rimraf = require("rimraf");
const util_1 = require("util");
const balena = balena_sdk_1.fromSharedOptions();
const rimrafAsync = util_1.promisify(rimraf);
/**
 * @summary Get path to image in cache
 * @function
 * @protected
 *
 * @param {String} deviceType - device type slug or alias
 * @param {String} version - the exact balenaOS version number
 * @returns {Promise<String>} image path
 *
 * @example
 * cache.getImagePath('raspberry-pi', '1.2.3').then (imagePath) ->
 * 	console.log(imagePath)
 */
exports.getImagePath = async (deviceType, version) => {
    await utils.validateVersion(version);
    const [cacheDirectory, deviceTypeInfo] = await Promise.all([
        balena.settings.get('cacheDirectory'),
        utils.getDeviceType(deviceType),
    ]);
    const extension = deviceTypeInfo.yocto.fstype === 'zip' ? 'zip' : 'img';
    return path.join(cacheDirectory, `${deviceType}-v${version}.${extension}`);
};
/**
 * @summary Determine if a device image is fresh
 * @function
 * @protected
 *
 * @description
 * If the device image does not exist, return false.
 *
 * @param {String} deviceType - device type slug or alias
 * @param {String} version - the exact balenaOS version number
 * @returns {Promise<Boolean>} is image fresh
 *
 * @example
 * utils.isImageFresh('raspberry-pi', '1.2.3').then (isFresh) ->
 * 	if isFresh
 * 		console.log('The Raspberry Pi image v1.2.3 is fresh!')
 */
exports.isImageFresh = async (deviceType, version) => {
    const imagePath = await exports.getImagePath(deviceType, version);
    let createdDate;
    try {
        createdDate = await utils.getFileCreatedDate(imagePath);
    }
    catch (_a) {
        // Swallow errors from utils.getFileCreatedTime.
    }
    if (createdDate == null) {
        return false;
    }
    const lastModifiedDate = await balena.models.os.getLastModified(deviceType, version);
    return lastModifiedDate < createdDate;
};
/**
 * @summary Get an image from the cache
 * @function
 * @protected
 *
 * @param {String} deviceType - device type slug or alias
 * @param {String} version - the exact balenaOS version number
 * @returns {Promise<fs.ReadStream>} image readable stream
 *
 * @example
 * utils.getImage('raspberry-pi', '1.2.3').then (stream) ->
 * 	stream.pipe(fs.createWriteStream('foo/bar.img'))
 */
async function getImage(deviceType, version) {
    var _a;
    const imagePath = await exports.getImagePath(deviceType, version);
    const stream = fs.createReadStream(imagePath);
    // Default to application/octet-stream if we could not find a more specific mime type
    // @ts-ignore adding an extra prop
    stream.mime = (_a = mime.getType(imagePath)) !== null && _a !== void 0 ? _a : 'application/octet-stream';
    return stream;
}
exports.getImage = getImage;
/**
 * @summary Get a writable stream for an image in the cache
 * @function
 * @protected
 *
 * @param {String} deviceType - device type slug or alias
 * @param {String} version - the exact balenaOS version number
 * @returns {Promise<fs.WriteStream & { persistCache: () => Promise<void>, removeCache: () => Promise<void> }>} image writable stream
 *
 * @example
 * utils.getImageWritableStream('raspberry-pi', '1.2.3').then (stream) ->
 * 	fs.createReadStream('foo/bar').pipe(stream)
 */
async function getImageWritableStream(deviceType, version) {
    const imagePath = await exports.getImagePath(deviceType, version);
    // Ensure the cache directory exists, to prevent
    // ENOENT errors when trying to write to it.
    await mkdirp(path.dirname(imagePath));
    // Append .inprogress to streams, move them to the right location only on success
    const inProgressPath = imagePath + '.inprogress';
    const stream = fs.createWriteStream(inProgressPath);
    // Call .isCompleted on the stream
    // @ts-ignore adding an extra prop
    stream.persistCache = () => fs.promises.rename(inProgressPath, imagePath);
    // @ts-ignore adding an extra prop
    stream.removeCache = () => fs.promises.unlink(inProgressPath);
    // @ts-expect-error missing typings for the extra properties on the stream we return
    return stream;
}
exports.getImageWritableStream = getImageWritableStream;
/**
 * @summary Clean the cache
 * @function
 * @protected
 *
 * @returns {Promise}
 *
 * @example
 * cache.clean()
 */
async function clean() {
    await rimrafAsync(await balena.settings.get('cacheDirectory'));
}
exports.clean = clean;

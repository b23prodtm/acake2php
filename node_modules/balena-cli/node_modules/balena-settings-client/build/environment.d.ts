import * as _ from 'lodash';
/**
 * @summary Get setting name from environment variable
 * @function
 * @protected
 *
 * @param {String} variable - environment variable
 * @returns {String} setting name
 *
 * @throws Will throw if variable is missing.
 *
 * @example
 * console.log(environment.getSettingName('BALENARC_HELLO_WORLD'))
 * > helloWorld
 */
export declare const getSettingName: (variable?: string | undefined) => string;
/**
 * @summary Determine if a variable is a configuration variable
 * @function
 * @protected
 *
 * @param {String} variable - environment variable
 * @returns {Boolean} is a configuration variable
 *
 * @example
 * console.log(environment.isSettingVariable('BALENARC_HELLO_WORLD'))
 * > true
 *
 * @example
 * console.log(environment.isSettingVariable('EDITOR'))
 * > false
 */
export declare const isSettingVariable: (variable: string) => boolean;
/**
 * @summary Parse environment variables
 * @function
 * @protected
 *
 * @param {Object} environment - environment
 * @returns {Object} parsed environment variables
 *
 * @example
 * console.log(utils.parse({
 * 	BALENARC_BALENA_URL: 'https://balena.io'
 * 	EDITOR: 'vim'
 * }))
 * > {
 * > 	balenaUrl: 'https://balena.io'
 * > }
 */
export declare const parse: (environment: {
    [k: string]: string | undefined;
}) => _.Dictionary<string | undefined>;

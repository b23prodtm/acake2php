"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSubcommand = exports.checkDeletedCommand = exports.preparseArgs = void 0;
const lazy_1 = require("./utils/lazy");
const errors_1 = require("./errors");
async function preparseArgs(argv) {
    if (process.env.DEBUG) {
        console.log(`[debug] original argv0="${process.argv0}" argv=[${argv}] length=${argv.length}`);
    }
    const cmdSlice = argv.slice(2);
    if (cmdSlice.length > 0) {
        if (['--version', '-v'].includes(cmdSlice[0])) {
            cmdSlice[0] = 'version';
        }
        else if (['--help', '-h'].includes(cmdSlice[0])) {
            cmdSlice[0] = 'help';
        }
        if (cmdSlice.length > 1 &&
            cmdSlice[0] === 'help' &&
            cmdSlice[1][0] !== '-') {
            cmdSlice.shift();
            cmdSlice.push('--help');
        }
        const debugIndex = cmdSlice.indexOf('--debug');
        if (debugIndex > -1) {
            process.env.DEBUG = '1';
            cmdSlice.splice(debugIndex, 1);
        }
    }
    if (process.env.DEBUG) {
        process.env.BLUEBIRD_LONG_STACK_TRACES = '1';
    }
    const Logger = await Promise.resolve().then(() => require('./utils/logger'));
    Logger.command = cmdSlice[0];
    let args = cmdSlice;
    if (await isSubcommand(cmdSlice)) {
        args = [cmdSlice[0] + ':' + cmdSlice[1], ...cmdSlice.slice(2)];
        Logger.command = `${cmdSlice[0]} ${cmdSlice[1]}`;
    }
    if (process.env.DEBUG) {
        console.log(`[debug] new argv=[${[argv[0], argv[1], ...args]}] length=${args.length + 2}`);
    }
    return args;
}
exports.preparseArgs = preparseArgs;
function checkDeletedCommand(argvSlice) {
    if (argvSlice[0] === 'help') {
        argvSlice = argvSlice.slice(1);
    }
    function replaced(oldCmd, alternative, version, verb = 'replaced') {
        errors_1.exitWithExpectedError(lazy_1.stripIndent `
			Note: the command "balena ${oldCmd}" was ${verb} in CLI version ${version}.
			Please use "balena ${alternative}" instead.
		`);
    }
    function removed(oldCmd, alternative, version) {
        let msg = `Note: the command "balena ${oldCmd}" was removed in CLI version ${version}.`;
        if (alternative) {
            msg = [msg, alternative].join('\n');
        }
        errors_1.exitWithExpectedError(msg);
    }
    const stopAlternative = 'Please use "balena ssh -s" to access the host OS, then use `balena-engine stop`.';
    const cmds = {
        sync: [replaced, 'push', 'v11.0.0', 'removed'],
        'local logs': [replaced, 'logs', 'v11.0.0'],
        'local push': [replaced, 'push', 'v11.0.0'],
        'local scan': [replaced, 'scan', 'v11.0.0'],
        'local ssh': [replaced, 'ssh', 'v11.0.0'],
        'local stop': [removed, stopAlternative, 'v11.0.0'],
    };
    let cmd;
    if (argvSlice.length > 1) {
        cmd = [argvSlice[0], argvSlice[1]].join(' ');
    }
    else if (argvSlice.length > 0) {
        cmd = argvSlice[0];
    }
    if (cmd && Object.getOwnPropertyNames(cmds).includes(cmd)) {
        cmds[cmd][0](cmd, ...cmds[cmd].slice(1));
    }
}
exports.checkDeletedCommand = checkDeletedCommand;
async function isSubcommand(args) {
    const { getCommandIdsFromManifest } = await Promise.resolve().then(() => require('./utils/oclif-utils'));
    const commandIds = await getCommandIdsFromManifest();
    return commandIds.includes(`${args[0] || ''}:${args[1] || ''}`);
}
exports.isSubcommand = isSubcommand;
//# sourceMappingURL=preparser.js.map
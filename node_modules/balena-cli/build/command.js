"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const errors_1 = require("./errors");
class BalenaCommand extends command_1.default {
    static async checkElevatedPrivileges() {
        const isElevated = await (await Promise.resolve().then(() => require('is-elevated')))();
        if (!isElevated) {
            throw new errors_1.InsufficientPrivilegesError('You need root/admin privileges to run this command');
        }
    }
    static async checkLoggedIn() {
        await (await Promise.resolve().then(() => require('./utils/patterns'))).checkLoggedIn();
    }
    static async checkLoggedInIf(doCheck) {
        if (doCheck) {
            await this.checkLoggedIn();
        }
    }
    async getStdin() {
        this.stdin = await (await Promise.resolve().then(() => require('get-stdin')))();
    }
    static async getLogger() {
        return (await Promise.resolve().then(() => require('./utils/logger'))).getLogger();
    }
    async init() {
        const ctr = this.constructor;
        if (ctr.root) {
            await BalenaCommand.checkElevatedPrivileges();
        }
        if (ctr.authenticated) {
            await BalenaCommand.checkLoggedIn();
        }
        if (ctr.readStdin) {
            await this.getStdin();
        }
    }
}
exports.default = BalenaCommand;
BalenaCommand.primary = false;
BalenaCommand.root = false;
BalenaCommand.authenticated = false;
BalenaCommand.readStdin = false;
//# sourceMappingURL=command.js.map
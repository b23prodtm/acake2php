/// <reference types="node" />
import type { InitializeEmitter, OperationState } from 'balena-device-init';
import type * as BalenaSdk from 'balena-sdk';
import { SpawnOptions } from 'child_process';
import type { Device, PineOptions } from 'balena-sdk';
export declare function getGroupDefaults(group: {
    options: Array<{
        name: string;
        default: string | number;
    }>;
}): {
    [name: string]: string | number | undefined;
};
export declare function stateToString(state: OperationState): string;
export declare function sudo(command: string[], { stderr, msg, isCLIcmd, }?: {
    stderr?: NodeJS.WritableStream;
    msg?: string;
    isCLIcmd?: boolean;
}): Promise<void>;
export declare function runCommand<T>(commandArgs: string[]): Promise<T>;
export declare function getManifest(image: string, deviceType: string): Promise<BalenaSdk.DeviceTypeJson.DeviceType>;
export declare const areDeviceTypesCompatible: (appDeviceType: BalenaSdk.DeviceTypeJson.DeviceType, osDeviceType: BalenaSdk.DeviceTypeJson.DeviceType) => boolean;
export declare function osProgressHandler(step: InitializeEmitter): Promise<void>;
export declare function getAppWithArch(applicationName: string): Promise<ApplicationWithDeviceType & {
    arch: string;
}>;
export declare const delay: typeof setTimeout.__promisify__;
export declare function retry<T>({ func, maxAttempts, label, initialDelayMs, backoffScaler, maxSingleDelayMs, }: {
    func: () => T;
    maxAttempts: number;
    label: string;
    initialDelayMs?: number;
    backoffScaler?: number;
    maxSingleDelayMs?: number;
}): Promise<T>;
export declare function getManualSortCompareFunction<T, U = T>(manuallySortedArray: U[], equalityFunc: (a: T, x: U, index: number, array: U[]) => boolean): (a: T, b: T) => number;
export declare function isWindowsComExeShell(): boolean;
export declare function shellEscape(args: string[], detectShell?: boolean): string[];
export declare function which(program: string, rejectOnMissing?: boolean): Promise<string>;
export declare function whichSpawn(programName: string, args: string[], options?: SpawnOptions, returnExitCodeOrSignal?: boolean): Promise<[number | undefined, string | undefined]>;
export interface ProxyConfig {
    host: string;
    port: string;
    username?: string;
    password?: string;
    proxyAuth?: string;
}
export declare function getProxyConfig(): ProxyConfig | undefined;
export declare const expandForAppName: PineOptions<Device>;
export declare function addSIGINTHandler(sigintHandler: () => void, once?: boolean): void;
export declare function awaitInterruptibleTask<T extends (...args: any[]) => Promise<any>>(task: T, ...theArgs: Parameters<T>): Promise<ReturnType<T>>;

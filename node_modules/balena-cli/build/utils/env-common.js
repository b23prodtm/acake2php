"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDbId = exports.getVarResourceName = exports.rmRenameHelp = exports.booleanService = exports.booleanDevice = exports.booleanConfig = void 0;
const command_1 = require("@oclif/command");
const lazy_1 = require("./lazy");
const errors_1 = require("../errors");
exports.booleanConfig = command_1.flags.boolean({
    char: 'c',
    description: 'select a configuration variable (may be used together with the --device option)',
    default: false,
    exclusive: ['service'],
});
exports.booleanDevice = command_1.flags.boolean({
    char: 'd',
    description: 'select a device-specific variable instead of an application (fleet) variable',
    default: false,
});
exports.booleanService = command_1.flags.boolean({
    char: 's',
    description: 'select a service variable (may be used together with the --device option)',
    default: false,
    exclusive: ['config'],
});
exports.rmRenameHelp = lazy_1.stripIndent `
	Variables are selected by their database ID (as reported by the 'balena envs'
	command) and one of six database "resource types":

	- application (fleet) environment variable
	- application (fleet) configuration variable (--config)
	- application (fleet) service variable (--service)
	- device environment variable (--device)
	- device configuration variable (--device --config)
	- device service variable (--device --service)

	The --device option selects a device-specific variable instead of an application
	(fleet) variable.

	The --config option selects a configuration variable. Configuration variable
	names typically start with the 'BALENA_' or 'RESIN_' prefixes and are used to
	configure balena platform features.

	The --service option selects a service variable, which is an environment variable
	that applies to a specifc service (application container) in a microservices
	(multicontainer) application.

	The --service and --config options cannot be used together, but they can be
	used alongside the --device option to select a device-specific service or
	configuration variable.
`;
function getVarResourceName(isConfig, isDevice, isService) {
    return isDevice
        ? isConfig
            ? 'device_config_variable'
            : isService
                ? 'device_service_environment_variable'
                : 'device_environment_variable'
        : isConfig
            ? 'application_config_variable'
            : isService
                ? 'service_environment_variable'
                : 'application_environment_variable';
}
exports.getVarResourceName = getVarResourceName;
function parseDbId(id) {
    if (/^[\d]+$/.exec(id) == null) {
        throw new errors_1.ExpectedError("The variable's ID must be an integer");
    }
    return Number(id);
}
exports.parseDbId = parseDbId;
//# sourceMappingURL=env-common.js.map
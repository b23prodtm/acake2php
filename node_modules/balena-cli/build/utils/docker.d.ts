import type * as dockerode from 'dockerode';
import { flags } from '@oclif/command';
export * from './docker-js';
export interface DockerConnectionCliFlags {
    docker?: string;
    dockerHost?: string;
    dockerPort?: number;
    ca?: string;
    cert?: string;
    key?: string;
}
export interface DockerCliFlags extends DockerConnectionCliFlags {
    tag?: string;
    buildArg?: string[];
    'cache-from'?: string;
    nocache: boolean;
    pull?: boolean;
    squash: boolean;
}
export declare const dockerConnectionCliFlags: flags.Input<DockerConnectionCliFlags>;
export declare const dockerCliFlags: flags.Input<DockerCliFlags>;
export interface BuildOpts {
    buildargs?: Dictionary<string>;
    cachefrom?: string[];
    nocache?: boolean;
    pull?: boolean;
    registryconfig?: import('resin-multibuild').RegistrySecrets;
    squash?: boolean;
    t?: string;
}
export declare function generateBuildOpts(options: {
    buildArg?: string[];
    'cache-from'?: string;
    nocache: boolean;
    pull?: boolean;
    'registry-secrets'?: import('resin-multibuild').RegistrySecrets;
    squash: boolean;
    tag?: string;
}): BuildOpts;
export declare function isBalenaEngine(docker: dockerode): Promise<boolean>;

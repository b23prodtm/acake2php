import type * as BalenaSdk from 'balena-sdk';
import type { Chalk } from 'chalk';
import type * as CliForm from 'resin-cli-form';
export declare const onceAsync: <T>(fn: () => Promise<T>) => () => Promise<T>;
export declare const getBalenaSdk: () => BalenaSdk.BalenaSDK;
export declare const getVisuals: () => any;
export declare const getChalk: () => Chalk;
export declare const getCliForm: () => typeof CliForm;
export declare const getCliUx: () => {
    config: import("cli-ux").Config;
    warn: typeof import("@oclif/errors").warn;
    error: typeof import("@oclif/errors").error;
    exit: typeof import("@oclif/errors").exit;
    readonly prompt: typeof import("cli-ux/lib/prompt").prompt;
    readonly anykey: typeof import("cli-ux/lib/prompt").anykey;
    readonly confirm: typeof import("cli-ux/lib/prompt").confirm;
    readonly action: import("cli-ux").ActionBase;
    styledObject(obj: any, keys?: string[] | undefined): void;
    readonly styledHeader: typeof import("cli-ux/lib/styled/header").default;
    readonly styledJSON: typeof import("cli-ux/lib/styled/json").default;
    readonly table: typeof import("cli-ux/lib/styled/table").default;
    readonly tree: typeof import("cli-ux/lib/styled/tree").default;
    readonly open: typeof import("cli-ux/lib/open").default;
    readonly wait: (ms?: number | undefined) => Promise<{}>;
    done(): Promise<void>;
    trace(format: string, ...args: string[]): void;
    debug(format: string, ...args: string[]): void;
    info(format: string, ...args: string[]): void;
    log(format?: string | undefined, ...args: string[]): void;
    url(text: string, uri: string, params?: {} | undefined): void;
    annotation(text: string, annotation: string): void;
    flush(): Promise<void>;
};
export declare const stripIndent: import("common-tags").TemplateTag;

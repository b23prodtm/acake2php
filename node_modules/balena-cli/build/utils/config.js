"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDeviceConfig = exports.generateApplicationConfig = exports.generateBaseConfig = void 0;
const semver = require("balena-semver");
const lazy_1 = require("./lazy");
async function generateBaseConfig(application, options) {
    options = {
        ...options,
        appUpdatePollInterval: options.appUpdatePollInterval || 10,
    };
    const config = (await lazy_1.getBalenaSdk().models.os.getConfig(application.slug, options));
    delete config.apiKey;
    if (options.os && options.os.sshKeys) {
        config.os = config.os ? config.os : {};
        config.os.sshKeys = config.os.sshKeys
            ? [...config.os.sshKeys, ...options.os.sshKeys]
            : options.os.sshKeys;
    }
    return config;
}
exports.generateBaseConfig = generateBaseConfig;
async function generateApplicationConfig(application, options) {
    const config = await generateBaseConfig(application, options);
    if (semver.satisfies(options.version, '<2.7.8')) {
        await addApplicationKey(config, application.id);
    }
    else {
        await addProvisioningKey(config, application.id);
    }
    return config;
}
exports.generateApplicationConfig = generateApplicationConfig;
function generateDeviceConfig(device, deviceApiKey, options) {
    return lazy_1.getBalenaSdk()
        .models.application.get(device.belongs_to__application.__id)
        .then(async (application) => {
        const baseConfigOpts = {
            ...options,
            deviceType: device.is_of__device_type[0].slug,
        };
        const config = await generateBaseConfig(application, baseConfigOpts);
        if (deviceApiKey == null && semver.satisfies(options.version, '<2.0.3')) {
            await addApplicationKey(config, application.id);
        }
        else {
            await addDeviceKey(config, device.uuid, deviceApiKey || true);
        }
        return config;
    })
        .then((config) => {
        config.registered_at = Math.floor(Date.now() / 1000);
        config.deviceId = device.id;
        config.uuid = device.uuid;
        return config;
    });
}
exports.generateDeviceConfig = generateDeviceConfig;
function addApplicationKey(config, applicationNameOrId) {
    return lazy_1.getBalenaSdk()
        .models.application.generateApiKey(applicationNameOrId)
        .then((apiKey) => {
        config.apiKey = apiKey;
        return apiKey;
    });
}
function addProvisioningKey(config, applicationNameOrId) {
    return lazy_1.getBalenaSdk()
        .models.application.generateProvisioningKey(applicationNameOrId)
        .then((apiKey) => {
        config.apiKey = apiKey;
        return apiKey;
    });
}
async function addDeviceKey(config, uuid, customDeviceApiKey) {
    if (customDeviceApiKey === true) {
        config.deviceApiKey = await lazy_1.getBalenaSdk().models.device.generateDeviceKey(uuid);
    }
    else {
        config.deviceApiKey = customDeviceApiKey;
    }
}
//# sourceMappingURL=config.js.map
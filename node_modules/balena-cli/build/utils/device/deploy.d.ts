/// <reference types="node" />
import * as Docker from 'dockerode';
import { Composition } from 'resin-compose-parse';
import { BuildTask, RegistrySecrets } from 'resin-multibuild';
import type { Readable } from 'stream';
import Logger = require('../logger');
import { DeviceInfo } from './api';
export interface DeviceDeployOptions {
    source: string;
    deviceHost: string;
    devicePort?: number;
    dockerfilePath?: string;
    registrySecrets: RegistrySecrets;
    multiDockerignore: boolean;
    nocache: boolean;
    nogitignore: boolean;
    noParentCheck: boolean;
    nolive: boolean;
    pull: boolean;
    detached: boolean;
    services?: string[];
    system: boolean;
    env: string[];
    convertEol: boolean;
}
interface ParsedEnvironment {
    [serviceName: string]: {
        [key: string]: string;
    };
}
export declare function deployToDevice(opts: DeviceDeployOptions): Promise<void>;
export declare function performBuilds(composition: Composition, tarStream: Readable, docker: Docker, deviceInfo: DeviceInfo, logger: Logger, opts: DeviceDeployOptions, buildLogs?: Dictionary<string>): Promise<BuildTask[]>;
export declare function rebuildSingleTask(serviceName: string, docker: Docker, logger: Logger, deviceInfo: DeviceInfo, composition: Composition, source: string, opts: DeviceDeployOptions, containerIdCb?: (id: string) => void): Promise<string>;
export declare function generateTargetState(currentTargetState: any, composition: Composition, buildTasks: BuildTask[], env: ParsedEnvironment): any;
export {};

export function generateOpts(options: any): Promise<{
    projectName: any;
    projectPath: string;
    inlineLogs: boolean;
    convertEol: boolean;
    dockerfilePath: any;
    multiDockerignore: boolean;
    nogitignore: boolean;
    noParentCheck: any;
}>;
export function createProject(composePath: string, composeStr: string, projectName?: string | null): import('./compose-types').ComposeProject;
export function originalTarDirectory(dir: string, param: import('./compose-types').TarDirectoryOptions): Promise<import('stream').Readable>;
export function createRelease(apiEndpoint: string, auth: string, userId: number, appId: number, composition: import('resin-compose-parse').Composition): Promise<import('./compose-types').Release>;
export function tagServiceImages(docker: import('docker-toolbelt'), images: Array<import('./compose-types').BuiltImage>, serviceImages: Partial<import('balena-release/build/models').ImageModel>): Promise<Array<import('./compose-types').TaggedImage>>;
export function getPreviousRepos(sdk: any, docker: import('docker-toolbelt'), logger: import('./logger'), appID: number): Promise<string[]>;
export function authorizePush(sdk: any, tokenAuthEndpoint: string, registry: string, images: string[], previousRepos: string[]): Promise<string>;
export function pushAndUpdateServiceImages(docker: import('docker-toolbelt'), token: string, images: Array<import('./compose-types').TaggedImage>, afterEach: (serviceImage: import('balena-release/build/models').ImageModel, props: object) => void): import("bluebird")<void[]>;
export class BuildProgressUI {
    constructor(tty: any, descriptors: any);
    _handleEvent(service: any, event: any): void;
    _handleInterrupt(): never;
    start(): void;
    end(summary?: any): void;
    _display(): void;
    _tty: any;
    _serviceToDataMap: {};
    _services: any[];
    _prefixWidth: any;
    _prefix: string;
    _maxLineWidth: any;
    _lineWidths: any[];
    _startTime: number | null;
    _ended: boolean;
    _cancelled: boolean;
    _spinner: () => string;
    streams: import("lodash").Dictionary<any>;
    _runloop: {
        onEnd(): void;
        end(): void;
    } | null | undefined;
    _clear(): void;
    _getServiceSummary(): import("lodash").Dictionary<any>;
    _renderStatus(end: any): void;
    _renderSummary(serviceToStrMap: any): void;
}
export class BuildProgressInline {
    constructor(outStream: any, descriptors: any);
    start(): void;
    end(summary?: any): void;
    _renderEvent(service: any, event: any): void;
    _prefixWidth: any;
    _outStream: any;
    _services: any[];
    _startTime: number | null;
    _ended: boolean;
    streams: import("lodash").Dictionary<any>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.looksLikeAppSlug = exports.parseAsLocalHostnameOrIp = exports.tryAsInteger = exports.parseAsInteger = exports.looksLikeInteger = exports.validateUuid = exports.validateShortUuid = exports.validateLongUuid = exports.validateLocalHostnameOrIp = exports.validateDotLocalUrl = exports.validateIPAddress = exports.validateApplicationName = exports.validatePassword = exports.validateEmail = void 0;
const validEmail = require("@resin.io/valid-email");
const errors_1 = require("../errors");
const APPNAME_REGEX = new RegExp(/^[a-zA-Z0-9_-]+$/);
const IP_REGEX = new RegExp(/\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/);
const DOTLOCAL_REGEX = new RegExp(/^([a-zA-Z0-9-]+\.)+local$/);
const UUID_REGEX = new RegExp(/^[0-9a-f]+$/);
function validateEmail(input) {
    if (!validEmail(input)) {
        return 'Email is not valid';
    }
    return true;
}
exports.validateEmail = validateEmail;
function validatePassword(input) {
    if (input.length < 8) {
        return 'Password should be 8 characters long';
    }
    return true;
}
exports.validatePassword = validatePassword;
function validateApplicationName(input) {
    if (input.length < 4) {
        return 'The application name should be at least 4 characters';
    }
    return APPNAME_REGEX.test(input);
}
exports.validateApplicationName = validateApplicationName;
function validateIPAddress(input) {
    return IP_REGEX.test(input);
}
exports.validateIPAddress = validateIPAddress;
function validateDotLocalUrl(input) {
    return DOTLOCAL_REGEX.test(input);
}
exports.validateDotLocalUrl = validateDotLocalUrl;
function validateLocalHostnameOrIp(input) {
    return validateIPAddress(input) || validateDotLocalUrl(input);
}
exports.validateLocalHostnameOrIp = validateLocalHostnameOrIp;
function validateLongUuid(input) {
    if (input.length !== 32 && input.length !== 62) {
        return false;
    }
    return UUID_REGEX.test(input);
}
exports.validateLongUuid = validateLongUuid;
function validateShortUuid(input) {
    if (input.length !== 7) {
        return false;
    }
    return UUID_REGEX.test(input);
}
exports.validateShortUuid = validateShortUuid;
function validateUuid(input) {
    return validateLongUuid(input) || validateShortUuid(input);
}
exports.validateUuid = validateUuid;
function looksLikeInteger(input) {
    return /^(?:0|[1-9][0-9]*)$/.test(input);
}
exports.looksLikeInteger = looksLikeInteger;
function parseAsInteger(input, paramName) {
    if (!looksLikeInteger(input)) {
        const message = paramName == null
            ? 'The parameter must be an integer.'
            : `The parameter '${paramName}' must be an integer.`;
        throw new errors_1.ExpectedError(message);
    }
    return Number(input);
}
exports.parseAsInteger = parseAsInteger;
function tryAsInteger(input) {
    try {
        return parseAsInteger(input);
    }
    catch (_a) {
        return input;
    }
}
exports.tryAsInteger = tryAsInteger;
function parseAsLocalHostnameOrIp(input, paramName) {
    if (input && !validateLocalHostnameOrIp(input)) {
        const message = paramName == null
            ? 'The parameter must be a local hostname or IP address.'
            : `The parameter '${paramName}' must be a local hostname or IP address.`;
        throw new errors_1.ExpectedError(message);
    }
    return input;
}
exports.parseAsLocalHostnameOrIp = parseAsLocalHostnameOrIp;
function looksLikeAppSlug(input) {
    return /[\S]+\/[\S]{4,}/.test(input);
}
exports.looksLikeAppSlug = looksLikeAppSlug;
//# sourceMappingURL=validation.js.map
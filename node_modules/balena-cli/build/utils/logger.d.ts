/// <reference types="node" />
declare enum Level {
    BUILD = "build",
    INFO = "info",
    DEBUG = "debug",
    SUCCESS = "success",
    WARN = "warn",
    ERROR = "error",
    LOGS = "logs",
    LIVEPUSH = "livepush"
}
declare class Logger {
    static readonly Level: typeof Level;
    static command: string;
    streams: {
        build: NodeJS.ReadWriteStream;
        info: NodeJS.ReadWriteStream;
        debug: NodeJS.ReadWriteStream;
        success: NodeJS.ReadWriteStream;
        warn: NodeJS.ReadWriteStream;
        error: NodeJS.ReadWriteStream;
        logs: NodeJS.ReadWriteStream;
        livepush: NodeJS.ReadWriteStream;
    };
    formatMessage: (name: string, message: string) => string;
    protected deferredLogMessages: Array<[string, Level]>;
    protected constructor();
    protected static logger: Logger;
    static getLogger(): Logger;
    logInfo(msg: string): boolean;
    logDebug(msg: string): boolean;
    logSuccess(msg: string): boolean;
    logWarn(msg: string): boolean;
    logError(msg: string): boolean;
    logBuild(msg: string): boolean;
    logLogs(msg: string): boolean;
    logLivepush(msg: string): boolean;
    deferredLog(msg: string, level: Level): void;
    outputDeferredMessages(): void;
}
export = Logger;

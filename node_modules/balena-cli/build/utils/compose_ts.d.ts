/// <reference types="node" />
import { flags } from '@oclif/command';
import { BalenaSDK } from 'balena-sdk';
import type * as Dockerode from 'dockerode';
import type { BuildConfig, Composition } from 'resin-compose-parse';
import type * as MultiBuild from 'resin-multibuild';
import type { Readable } from 'stream';
import { BuiltImage, ComposeCliFlags, ComposeOpts, ComposeProject, TarDirectoryOptions } from './compose-types';
import type { DeviceInfo } from './device/api';
import Logger = require('./logger');
export declare function parseReleaseTagKeysAndValues(releaseTags: string[]): {
    releaseTagKeys: string[];
    releaseTagValues: string[];
};
export declare function applyReleaseTagKeysAndValues(sdk: BalenaSDK, releaseId: number, releaseTagKeys: string[], releaseTagValues: string[]): Promise<void>;
export declare function loadProject(logger: Logger, opts: ComposeOpts, image?: string): Promise<ComposeProject>;
export declare function buildProject(opts: {
    docker: Dockerode;
    logger: Logger;
    projectPath: string;
    projectName: string;
    composition: Composition;
    arch: string;
    deviceType: string;
    emulated: boolean;
    buildOpts: import('./docker').BuildOpts;
    inlineLogs?: boolean;
    convertEol: boolean;
    dockerfilePath?: string;
    nogitignore: boolean;
    multiDockerignore: boolean;
}): Promise<BuiltImage[]>;
export declare function getServiceDirsFromComposition(sourceDir: string, composition?: Composition): Promise<Dictionary<string>>;
export declare function isBuildConfig(image: string | BuildConfig): image is BuildConfig;
export declare function tarDirectory(dir: string, param: TarDirectoryOptions): Promise<import('stream').Readable>;
export declare function printGitignoreWarn(dockerignoreFile: string, gitignoreFiles: string[]): void;
export declare function checkBuildSecretsRequirements(docker: Dockerode, sourceDir: string): Promise<void>;
export declare function getRegistrySecrets(sdk: BalenaSDK, inputFilename?: string): Promise<MultiBuild.RegistrySecrets>;
export declare function makeBuildTasks(composition: Composition, tarStream: Readable, deviceInfo: DeviceInfo, logger: Logger, projectName: string, releaseHash?: string, preprocessHook?: (dockerfile: string) => string): Promise<MultiBuild.BuildTask[]>;
export interface ProjectValidationResult {
    dockerfilePath: string;
    registrySecrets: MultiBuild.RegistrySecrets;
}
export declare function validateProjectDirectory(sdk: BalenaSDK, opts: {
    dockerfilePath?: string;
    noParentCheck: boolean;
    projectPath: string;
    registrySecretsPath?: string;
}): Promise<ProjectValidationResult>;
export declare function deployProject(docker: import('docker-toolbelt'), logger: Logger, composition: Composition, images: BuiltImage[], appId: number, userId: number, auth: string, apiEndpoint: string, skipLogUpload: boolean): Promise<import('balena-release/build/models').ReleaseModel>;
export declare function createSpinner(): () => string;
export declare function createRunLoop(tick: (...args: any[]) => void): {
    onEnd(): void;
    end(): void;
};
export declare const composeCliFlags: flags.Input<ComposeCliFlags>;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installQemuIfNeeded = exports.installQemu = exports.getQemuPath = exports.copyQemu = exports.qemuPathInContext = exports.QEMU_BIN_NAME = exports.QEMU_VERSION = void 0;
const lazy_1 = require("./lazy");
exports.QEMU_VERSION = 'v5.2.0+balena1';
exports.QEMU_BIN_NAME = 'qemu-execve';
function qemuPathInContext(context) {
    const path = require('path');
    const binDir = path.join(context, '.balena');
    const binPath = path.join(binDir, exports.QEMU_BIN_NAME);
    return path.relative(context, binPath);
}
exports.qemuPathInContext = qemuPathInContext;
function copyQemu(context, arch) {
    const path = require('path');
    const fs = require('fs');
    const binDir = path.join(context, '.balena');
    const binPath = path.join(binDir, exports.QEMU_BIN_NAME);
    return fs.promises
        .mkdir(binDir)
        .catch(function (err) {
        if (err.code === 'EEXIST') {
            return;
        }
        throw err;
    })
        .then(() => exports.getQemuPath(arch))
        .then((qemu) => new Promise(function (resolve, reject) {
        const read = fs.createReadStream(qemu);
        const write = fs.createWriteStream(binPath);
        read
            .on('error', reject)
            .pipe(write)
            .on('error', reject)
            .on('finish', resolve);
    }))
        .then(() => fs.promises.chmod(binPath, '755'))
        .then(() => path.relative(context, binPath));
}
exports.copyQemu = copyQemu;
exports.getQemuPath = function (arch) {
    const balena = lazy_1.getBalenaSdk();
    const path = require('path');
    const { promises: fs } = require('fs');
    return balena.settings.get('binDirectory').then((binDir) => fs
        .mkdir(binDir)
        .catch(function (err) {
        if (err.code === 'EEXIST') {
            return;
        }
        throw err;
    })
        .then(() => path.join(binDir, `${exports.QEMU_BIN_NAME}-${arch}-${exports.QEMU_VERSION}`)));
};
function installQemu(arch) {
    const request = require('request');
    const fs = require('fs');
    const zlib = require('zlib');
    const tar = require('tar-stream');
    return exports.getQemuPath(arch).then((qemuPath) => new Promise(function (resolve, reject) {
        const installStream = fs.createWriteStream(qemuPath);
        const qemuArch = balenaArchToQemuArch(arch);
        const fileVersion = exports.QEMU_VERSION.replace('+', '.');
        const urlFile = encodeURIComponent(`qemu-${fileVersion}-${qemuArch}.tar.gz`);
        const urlVersion = encodeURIComponent(exports.QEMU_VERSION);
        const qemuUrl = `https://github.com/balena-io/qemu/releases/download/${urlVersion}/${urlFile}`;
        const extract = tar.extract();
        extract.on('entry', function (header, stream, next) {
            stream.on('end', next);
            if (header.name.includes(`qemu-${qemuArch}-static`)) {
                stream.pipe(installStream);
            }
            else {
                stream.resume();
            }
        });
        return request(qemuUrl)
            .on('error', reject)
            .pipe(zlib.createGunzip())
            .on('error', reject)
            .pipe(extract)
            .on('error', reject)
            .on('finish', function () {
            fs.chmodSync(qemuPath, '755');
            resolve();
        });
    }));
}
exports.installQemu = installQemu;
const balenaArchToQemuArch = function (arch) {
    switch (arch) {
        case 'armv7hf':
        case 'rpi':
        case 'armhf':
            return 'arm';
        case 'aarch64':
            return 'aarch64';
        default:
            throw new Error(`Cannot install emulator for architecture ${arch}`);
    }
};
async function installQemuIfNeeded(emulated, logger, arch, docker) {
    const needsQemu = await platformNeedsQemu(docker, logger);
    if (!emulated || !needsQemu) {
        return false;
    }
    const { promises: fs } = await Promise.resolve().then(() => require('fs'));
    const qemuPath = await exports.getQemuPath(arch);
    try {
        await fs.access(qemuPath);
    }
    catch (_a) {
        logger.logInfo(`Installing qemu for ${arch} emulation...`);
        await installQemu(arch);
    }
    return true;
}
exports.installQemuIfNeeded = installQemuIfNeeded;
async function platformNeedsQemu(docker, logger) {
    const dockerInfo = await docker.info();
    const isDockerDesktop = /(?:Docker Desktop)|(?:Docker for Mac)/i.test(dockerInfo.OperatingSystem);
    if (isDockerDesktop) {
        logger.logInfo(lazy_1.stripIndent `
			Docker Desktop detected (daemon architecture: "${dockerInfo.Architecture}")
			  Docker itself will determine and enable architecture emulation if required,
			  without balena-cli intervention and regardless of the --emulated option.`);
    }
    return !isDockerDesktop;
}
//# sourceMappingURL=qemu.js.map
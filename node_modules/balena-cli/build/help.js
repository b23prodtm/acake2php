"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_help_1 = require("@oclif/plugin-help");
const indent = require("indent-string");
const lazy_1 = require("./utils/lazy");
const list_1 = require("@oclif/plugin-help/lib/list");
const errors_1 = require("./errors");
function getHelpSubject(args) {
    for (const arg of args) {
        if (arg === '--') {
            return;
        }
        if (arg === 'help' || arg === '--help' || arg === '-h') {
            continue;
        }
        if (arg.startsWith('-')) {
            return;
        }
        return arg;
    }
}
class BalenaHelp extends plugin_help_1.default {
    constructor() {
        super(...arguments);
        this.manuallySortedPrimaryCommands = [
            'login',
            'push',
            'logs',
            'ssh',
            'apps',
            'app',
            'devices',
            'device',
            'tunnel',
            'preload',
            'build',
            'deploy',
            'join',
            'leave',
            'scan',
        ];
    }
    showHelp(argv) {
        const chalk = lazy_1.getChalk();
        const subject = getHelpSubject(argv);
        if (!subject) {
            const verbose = argv.includes('-v') || argv.includes('--verbose');
            this.showCustomRootHelp(verbose);
            return;
        }
        const command = this.config.findCommand(subject);
        if (command) {
            this.showCommandHelp(command);
            return;
        }
        const topicCommands = this.config.commands.filter((c) => {
            return c.id.startsWith(`${subject}:`);
        });
        if (topicCommands.length > 0) {
            console.log(`${chalk.yellow(subject)} commands include:`);
            console.log(this.formatCommands(topicCommands));
            console.log(`\nRun ${chalk.cyan.bold('balena help -v')} for a list of all available commands,`);
            console.log(` or ${chalk.cyan.bold('balena help <command>')} for detailed help on a specific command.`);
            return;
        }
        throw new errors_1.ExpectedError(`command ${chalk.cyan.bold(subject)} not found`);
    }
    showCustomRootHelp(showAllCommands) {
        var _a, _b;
        const chalk = lazy_1.getChalk();
        const bold = chalk.bold;
        const cmd = chalk.cyan.bold;
        let commands = this.config.commands;
        commands = commands.filter((c) => this.opts.all || !c.hidden);
        const primaryCommands = this.manuallySortedPrimaryCommands.map((pc) => {
            return commands.find((c) => c.id === pc.replace(' ', ':'));
        });
        const additionalCommands = commands.filter((c) => !this.manuallySortedPrimaryCommands.includes(c.id.replace(':', ' ')));
        const usageLength = commands
            .map((c) => { var _a; return ((_a = c.usage) === null || _a === void 0 ? void 0 : _a.length) || 0; })
            .reduce((longest, l) => {
            return l > longest ? l : longest;
        });
        if (typeof ((_a = primaryCommands[0]) === null || _a === void 0 ? void 0 : _a.usage) === 'string' &&
            typeof ((_b = additionalCommands[0]) === null || _b === void 0 ? void 0 : _b.usage) === 'string') {
            primaryCommands[0].usage = primaryCommands[0].usage.padEnd(usageLength);
            additionalCommands[0].usage = additionalCommands[0].usage.padEnd(usageLength);
        }
        console.log(bold('USAGE'));
        console.log('$ balena [COMMAND] [OPTIONS]');
        console.log(bold('\nPRIMARY COMMANDS'));
        console.log(this.formatCommands(primaryCommands));
        if (showAllCommands) {
            console.log(bold('\nADDITIONAL COMMANDS'));
            console.log(this.formatCommands(additionalCommands));
        }
        else {
            console.log(`\n${bold('...MORE')} run ${cmd('balena help --verbose')} to list additional commands.`);
        }
        console.log(bold('\nGLOBAL OPTIONS'));
        console.log('  --help, -h');
        console.log('  --debug\n');
        const { reachingOut, } = require('./utils/messages');
        console.log(reachingOut);
    }
    formatCommands(commands) {
        if (commands.length === 0) {
            return '';
        }
        const body = list_1.renderList(commands
            .filter((c) => c.usage != null && c.usage !== '')
            .map((c) => [c.usage, this.formatDescription(c.description)]), {
            spacer: '\n',
            stripAnsi: this.opts.stripAnsi,
            maxWidth: this.opts.maxWidth - 2,
        });
        return indent(body, 2);
    }
    formatDescription(desc = '') {
        var _a;
        const chalk = lazy_1.getChalk();
        desc = desc.split('\n')[0];
        if (desc[desc.length - 1] === '.') {
            desc = desc.substring(0, desc.length - 1);
        }
        if (desc[1] === ((_a = desc[1]) === null || _a === void 0 ? void 0 : _a.toLowerCase())) {
            desc = `${desc[0].toLowerCase()}${desc.substring(1)}`;
        }
        return chalk.grey(desc);
    }
}
exports.default = BalenaHelp;
//# sourceMappingURL=help.js.map
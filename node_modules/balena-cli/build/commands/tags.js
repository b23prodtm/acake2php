"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../command");
const errors_1 = require("../errors");
const cf = require("../utils/common-flags");
const lazy_1 = require("../utils/lazy");
const messages_1 = require("../utils/messages");
class TagsCmd extends command_1.default {
    constructor() {
        super(...arguments);
        this.missingResourceMessage = lazy_1.stripIndent `
					To list tags for a resource, you must provide exactly one of:

					  * An application, with --application <appNameOrSlug>
					  * A device, with --device <uuid>
					  * A release, with --release <id or commit>

					See the help page for examples:

					  $ balena help tags
	`;
    }
    async run() {
        const { flags: options } = this.parse(TagsCmd);
        options.application = options.application || options.app;
        delete options.app;
        const balena = lazy_1.getBalenaSdk();
        if (!options.application && !options.device && !options.release) {
            throw new errors_1.ExpectedError(this.missingResourceMessage);
        }
        const { tryAsInteger } = await Promise.resolve().then(() => require('../utils/validation'));
        let tags;
        if (options.application) {
            const { getTypedApplicationIdentifier } = await Promise.resolve().then(() => require('../utils/sdk'));
            tags = await balena.models.application.tags.getAllByApplication(await getTypedApplicationIdentifier(balena, options.application));
        }
        if (options.device) {
            tags = await balena.models.device.tags.getAllByDevice(tryAsInteger(options.device));
        }
        if (options.release) {
            const { disambiguateReleaseParam } = await Promise.resolve().then(() => require('../utils/normalization'));
            const releaseParam = await disambiguateReleaseParam(balena, options.release);
            tags = await balena.models.release.tags.getAllByRelease(releaseParam);
        }
        if (!tags || tags.length === 0) {
            throw new errors_1.ExpectedError('No tags found');
        }
        console.log(lazy_1.getVisuals().table.horizontal(tags, ['tag_key', 'value']));
    }
}
exports.default = TagsCmd;
TagsCmd.description = lazy_1.stripIndent `
		List all tags for an application, device or release.

		List all tags and their values for a particular application,
		device or release.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
TagsCmd.examples = [
    '$ balena tags --application MyApp',
    '$ balena tags -a myorg/myapp',
    '$ balena tags --device 7cf02a6',
    '$ balena tags --release 1234',
    '$ balena tags --release b376b0e544e9429483b656490e5b9443b4349bd6',
];
TagsCmd.usage = 'tags';
TagsCmd.flags = {
    application: {
        ...cf.application,
        exclusive: ['app', 'device', 'release'],
    },
    app: {
        ...cf.app,
        exclusive: ['application', 'device', 'release'],
    },
    device: {
        ...cf.device,
        exclusive: ['app', 'application', 'release'],
    },
    release: {
        ...cf.release,
        exclusive: ['app', 'application', 'device'],
    },
    help: cf.help,
};
TagsCmd.authenticated = true;
//# sourceMappingURL=tags.js.map
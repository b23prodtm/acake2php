"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const messages_1 = require("../../utils/messages");
const errors_1 = require("../../errors");
class DeviceMoveCmd extends command_1.default {
    async run() {
        const { args: params, flags: options } = this.parse(DeviceMoveCmd);
        const balena = lazy_1.getBalenaSdk();
        const { tryAsInteger } = await Promise.resolve().then(() => require('../../utils/validation'));
        const { expandForAppName } = await Promise.resolve().then(() => require('../../utils/helpers'));
        options.application = options.application || options.app;
        delete options.app;
        const deviceIds = params.uuid
            .split(',')
            .map((id) => tryAsInteger(id));
        const devices = await Promise.all(deviceIds.map((uuid) => balena.models.device.get(uuid, expandForAppName)));
        for (const device of devices) {
            const belongsToApplication = device.belongs_to__application;
            device.application_name = (belongsToApplication === null || belongsToApplication === void 0 ? void 0 : belongsToApplication[0]) ? belongsToApplication[0].app_name
                : 'N/a';
        }
        const { getApplication } = await Promise.resolve().then(() => require('../../utils/sdk'));
        const application = options.application
            ? await getApplication(balena, options.application)
            : await this.interactivelySelectApplication(balena, devices);
        for (const uuid of deviceIds) {
            try {
                await balena.models.device.move(uuid, application.id);
                console.info(`Device ${uuid} was moved to application ${application.slug}`);
            }
            catch (err) {
                console.info(`${err.message}, uuid: ${uuid}`);
                process.exitCode = 1;
            }
        }
    }
    async interactivelySelectApplication(balena, devices) {
        const [deviceDeviceTypes, deviceTypes] = await Promise.all([
            Promise.all(devices.map((device) => balena.models.device.getManifestBySlug(device.is_of__device_type[0].slug))),
            balena.models.config.getDeviceTypes(),
        ]);
        const compatibleDeviceTypes = deviceTypes.filter((dt) => deviceDeviceTypes.every((deviceDeviceType) => balena.models.os.isArchitectureCompatibleWith(deviceDeviceType.arch, dt.arch) &&
            !!dt.isDependent === !!deviceDeviceType.isDependent &&
            dt.state !== 'DISCONTINUED'));
        const patterns = await Promise.resolve().then(() => require('../../utils/patterns'));
        try {
            const application = await patterns.selectApplication((app) => compatibleDeviceTypes.some((dt) => dt.slug === app.is_for__device_type[0].slug) &&
                devices.some((device) => device.application_name !== app.app_name), true);
            return application;
        }
        catch (err) {
            if (deviceDeviceTypes.length) {
                throw new errors_1.ExpectedError(`${err.message}\nDo all devices have a compatible architecture?`);
            }
            throw err;
        }
    }
}
exports.default = DeviceMoveCmd;
DeviceMoveCmd.description = lazy_1.stripIndent `
		Move one or more devices to another application.

		Move one or more devices to another application.

		Note, if the application option is omitted it will be prompted
		for interactively.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
DeviceMoveCmd.examples = [
    '$ balena device move 7cf02a6',
    '$ balena device move 7cf02a6,dc39e52',
    '$ balena device move 7cf02a6 --application MyNewApp',
    '$ balena device move 7cf02a6 -a myorg/mynewapp',
];
DeviceMoveCmd.args = [
    {
        name: 'uuid',
        description: 'comma-separated list (no blank spaces) of device UUIDs to be moved',
        required: true,
    },
];
DeviceMoveCmd.usage = 'device move <uuid(s)>';
DeviceMoveCmd.flags = {
    application: cf.application,
    app: cf.app,
    help: cf.help,
};
DeviceMoveCmd.authenticated = true;
//# sourceMappingURL=move.js.map
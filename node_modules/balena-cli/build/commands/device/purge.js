"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class DevicePurgeCmd extends command_1.default {
    async run() {
        const { args: params } = this.parse(DevicePurgeCmd);
        const { tryAsInteger } = await Promise.resolve().then(() => require('../../utils/validation'));
        const balena = lazy_1.getBalenaSdk();
        const ux = lazy_1.getCliUx();
        const deviceIds = params.uuid.split(',').map((id) => {
            return tryAsInteger(id);
        });
        for (const deviceId of deviceIds) {
            ux.action.start(`Purging data from device ${deviceId}`);
            await balena.models.device.purge(deviceId);
            ux.action.stop();
        }
    }
}
exports.default = DevicePurgeCmd;
DevicePurgeCmd.description = lazy_1.stripIndent `
		Purge application data from a device.

		Purge application data from a device.
		This will clear the application's /data directory.

		Multiple devices may be specified with a comma-separated list
		of values (no spaces).
		`;
DevicePurgeCmd.examples = [
    '$ balena device purge 23c73a1',
    '$ balena device purge 55d43b3,23c73a1',
];
DevicePurgeCmd.usage = 'device purge <uuid>';
DevicePurgeCmd.args = [
    {
        name: 'uuid',
        description: 'comma-separated list (no blank spaces) of device UUIDs',
        required: true,
    },
];
DevicePurgeCmd.flags = {
    help: cf.help,
};
DevicePurgeCmd.authenticated = true;
//# sourceMappingURL=purge.js.map
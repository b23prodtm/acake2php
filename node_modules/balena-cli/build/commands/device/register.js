"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const ca = require("../../utils/common-args");
const lazy_1 = require("../../utils/lazy");
const messages_1 = require("../../utils/messages");
class DeviceRegisterCmd extends command_2.default {
    async run() {
        var _a;
        const { args: params, flags: options } = this.parse(DeviceRegisterCmd);
        const { getApplication } = await Promise.resolve().then(() => require('../../utils/sdk'));
        const balena = lazy_1.getBalenaSdk();
        const application = await getApplication(balena, params.application);
        const uuid = (_a = options.uuid) !== null && _a !== void 0 ? _a : balena.models.device.generateUniqueKey();
        console.info(`Registering to ${application.app_name}: ${uuid}`);
        const result = await balena.models.device.register(application.id, uuid);
        return result && result.uuid;
    }
}
exports.default = DeviceRegisterCmd;
DeviceRegisterCmd.description = lazy_1.stripIndent `
		Register a device.

		Register a device to an application.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
DeviceRegisterCmd.examples = [
    '$ balena device register MyApp',
    '$ balena device register MyApp --uuid <uuid>',
    '$ balena device register myorg/myapp --uuid <uuid>',
];
DeviceRegisterCmd.args = [ca.applicationRequired];
DeviceRegisterCmd.usage = 'device register <application>';
DeviceRegisterCmd.flags = {
    uuid: command_1.flags.string({
        description: 'custom uuid',
        char: 'u',
    }),
    help: cf.help,
};
DeviceRegisterCmd.authenticated = true;
//# sourceMappingURL=register.js.map
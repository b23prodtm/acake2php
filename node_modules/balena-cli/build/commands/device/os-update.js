"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const validation_1 = require("../../utils/validation");
const errors_1 = require("../../errors");
class DeviceOsUpdateCmd extends command_2.default {
    async run() {
        const { args: params, flags: options } = this.parse(DeviceOsUpdateCmd);
        const sdk = lazy_1.getBalenaSdk();
        const { uuid, is_of__device_type, os_version, os_variant, } = (await sdk.models.device.get(params.uuid, {
            $select: ['uuid', 'os_version', 'os_variant'],
            $expand: {
                is_of__device_type: {
                    $select: 'slug',
                },
            },
        }));
        const currentOsVersion = sdk.models.device.getOsVersion({
            os_version,
            os_variant,
        });
        if (!currentOsVersion) {
            throw new errors_1.ExpectedError('The current os version of the device is not available');
        }
        const hupVersionInfo = await sdk.models.os.getSupportedOsUpdateVersions(is_of__device_type[0].slug, currentOsVersion);
        if (hupVersionInfo.versions.length === 0) {
            throw new errors_1.ExpectedError('There are no available Host OS update targets for this device');
        }
        let targetOsVersion = options.version;
        if (targetOsVersion != null) {
            if (!hupVersionInfo.versions.includes(targetOsVersion)) {
                throw new errors_1.ExpectedError(`The provided version ${targetOsVersion} is not in the Host OS update targets for this device`);
            }
        }
        else {
            targetOsVersion = await lazy_1.getCliForm().ask({
                message: 'Target OS version',
                type: 'list',
                choices: hupVersionInfo.versions.map((version) => ({
                    name: hupVersionInfo.recommended === version
                        ? `${version} (recommended)`
                        : version,
                    value: version,
                })),
            });
        }
        const patterns = await Promise.resolve().then(() => require('../../utils/patterns'));
        await patterns.confirm(options.yes || false, 'Host OS updates require a device restart when they complete. Are you sure you want to proceed?');
        await sdk.models.device.startOsUpdate(uuid, targetOsVersion);
        await patterns.awaitDeviceOsUpdate(uuid, targetOsVersion);
    }
}
exports.default = DeviceOsUpdateCmd;
DeviceOsUpdateCmd.description = lazy_1.stripIndent `
		Start a Host OS update for a device.

		Start a Host OS update for a device.

		Note this command will ask for confirmation interactively.
		This can be avoided by passing the \`--yes\` option.

		Requires balenaCloud; will not work with openBalena or standalone balenaOS.
		`;
DeviceOsUpdateCmd.examples = [
    '$ balena device os-update 23c73a1',
    '$ balena device os-update 23c73a1 --version 2.31.0+rev1.prod',
];
DeviceOsUpdateCmd.args = [
    {
        name: 'uuid',
        description: 'the uuid of the device to update',
        parse: (dev) => validation_1.tryAsInteger(dev),
        required: true,
    },
];
DeviceOsUpdateCmd.usage = 'device os-update <uuid>';
DeviceOsUpdateCmd.flags = {
    version: command_1.flags.string({
        description: 'a balenaOS version',
    }),
    yes: cf.yes,
    help: cf.help,
};
DeviceOsUpdateCmd.authenticated = true;
//# sourceMappingURL=os-update.js.map
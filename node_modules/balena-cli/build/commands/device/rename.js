"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const validation_1 = require("../../utils/validation");
class DeviceRenameCmd extends command_1.default {
    async run() {
        const { args: params } = this.parse(DeviceRenameCmd);
        const balena = lazy_1.getBalenaSdk();
        const newName = params.newName ||
            (await lazy_1.getCliForm().ask({
                message: 'How do you want to name this device?',
                type: 'input',
            })) ||
            '';
        await balena.models.device.rename(params.uuid, newName);
    }
}
exports.default = DeviceRenameCmd;
DeviceRenameCmd.description = lazy_1.stripIndent `
		Rename a device.

		Rename a device.

		Note, if the name is omitted, it will be prompted for interactively.
		`;
DeviceRenameCmd.examples = [
    '$ balena device rename 7cf02a6',
    '$ balena device rename 7cf02a6 MyPi',
];
DeviceRenameCmd.args = [
    {
        name: 'uuid',
        description: 'the uuid of the device to rename',
        parse: (dev) => validation_1.tryAsInteger(dev),
        required: true,
    },
    {
        name: 'newName',
        description: 'the new name for the device',
    },
];
DeviceRenameCmd.usage = 'device rename <uuid> [newName]';
DeviceRenameCmd.flags = {
    help: cf.help,
};
DeviceRenameCmd.authenticated = true;
//# sourceMappingURL=rename.js.map
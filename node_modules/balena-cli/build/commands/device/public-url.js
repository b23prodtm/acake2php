"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const errors_1 = require("../../errors");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const validation_1 = require("../../utils/validation");
class DevicePublicUrlCmd extends command_2.default {
    async run() {
        const { args: params, flags: options } = this.parse(DevicePublicUrlCmd);
        if (params.legacyUuid) {
            const action = params.uuid;
            if (!['enable', 'disable', 'status'].includes(action)) {
                throw new errors_1.ExpectedError(`Unexpected arguments: ${params.uuid} ${params.legacyUuid}`);
            }
            options.enable = action === 'enable';
            options.disable = action === 'disable';
            options.status = action === 'status';
            params.uuid = params.legacyUuid;
            delete params.legacyUuid;
        }
        const balena = lazy_1.getBalenaSdk();
        if (options.enable) {
            await balena.models.device.enableDeviceUrl(params.uuid);
        }
        else if (options.disable) {
            await balena.models.device.disableDeviceUrl(params.uuid);
        }
        else if (options.status) {
            const hasUrl = await balena.models.device.hasDeviceUrl(params.uuid);
            console.log(hasUrl);
        }
        else {
            try {
                const url = await balena.models.device.getDeviceUrl(params.uuid);
                console.log(url);
            }
            catch (e) {
                if (e.message.includes('Device is not web accessible')) {
                    throw new errors_1.ExpectedError(lazy_1.stripIndent `
					Public URL is not enabled for this device.

					To enable, use:
						balena device public-url ${params.uuid} --enable
					`);
                }
                else {
                    throw e;
                }
            }
        }
    }
}
exports.default = DevicePublicUrlCmd;
DevicePublicUrlCmd.description = lazy_1.stripIndent `
		Get or manage the public URL for a device.

		This command will output the current public URL for the
		specified device.  It can also enable or disable the URL,
		or output the enabled status, using the respective options.

		The old command style 'balena device public-url enable <uuid>'
		is deprecated, but still supported.
	`;
DevicePublicUrlCmd.examples = [
    '$ balena device public-url 23c73a1',
    '$ balena device public-url 23c73a1 --enable',
    '$ balena device public-url 23c73a1 --disable',
    '$ balena device public-url 23c73a1 --status',
];
DevicePublicUrlCmd.args = [
    {
        name: 'uuid',
        description: 'the uuid of the device to manage',
        parse: (dev) => validation_1.tryAsInteger(dev),
        required: true,
    },
    {
        name: 'legacyUuid',
        parse: (dev) => validation_1.tryAsInteger(dev),
        hidden: true,
    },
];
DevicePublicUrlCmd.usage = 'device public-url <uuid>';
DevicePublicUrlCmd.flags = {
    enable: command_1.flags.boolean({
        description: 'enable the public URL',
        exclusive: ['disable', 'status'],
    }),
    disable: command_1.flags.boolean({
        description: 'disable the public URL',
        exclusive: ['enable', 'status'],
    }),
    status: command_1.flags.boolean({
        description: 'determine if public URL is enabled',
        exclusive: ['enable', 'disable'],
    }),
    help: cf.help,
};
DevicePublicUrlCmd.authenticated = true;
//# sourceMappingURL=public-url.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const validation_1 = require("../../utils/validation");
class DeviceRmCmd extends command_1.default {
    async run() {
        const { args: params, flags: options } = this.parse(DeviceRmCmd);
        const balena = lazy_1.getBalenaSdk();
        const patterns = await Promise.resolve().then(() => require('../../utils/patterns'));
        const uuids = params.uuid.split(',');
        await patterns.confirm(options.yes, uuids.length > 1
            ? `Are you sure you want to delete ${uuids.length} devices?`
            : `Are you sure you want to delete device ${uuids[0]} ?`);
        for (const uuid of uuids) {
            try {
                await balena.models.device.remove(validation_1.tryAsInteger(uuid));
            }
            catch (err) {
                console.info(`${err.message}, uuid: ${uuid}`);
                process.exitCode = 1;
                continue;
            }
        }
    }
}
exports.default = DeviceRmCmd;
DeviceRmCmd.description = lazy_1.stripIndent `
		Remove one or more devices.

		Remove one or more devices from balena.

		Note this command asks for confirmation interactively.
		You can avoid this by passing the \`--yes\` option.
		`;
DeviceRmCmd.examples = [
    '$ balena device rm 7cf02a6',
    '$ balena device rm 7cf02a6,dc39e52',
    '$ balena device rm 7cf02a6 --yes',
];
DeviceRmCmd.args = [
    {
        name: 'uuid',
        description: 'comma-separated list (no blank spaces) of device UUIDs to be removed',
        required: true,
    },
];
DeviceRmCmd.usage = 'device rm <uuid(s)>';
DeviceRmCmd.flags = {
    yes: cf.yes,
    help: cf.help,
};
DeviceRmCmd.authenticated = true;
//# sourceMappingURL=rm.js.map
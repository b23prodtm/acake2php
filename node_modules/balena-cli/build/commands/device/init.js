"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const messages_1 = require("../../utils/messages");
const helpers_1 = require("../../utils/helpers");
class DeviceInitCmd extends command_2.default {
    async run() {
        const { flags: options } = this.parse(DeviceInitCmd);
        const { promisify } = await Promise.resolve().then(() => require('util'));
        const rimraf = promisify(await Promise.resolve().then(() => require('rimraf')));
        const tmp = await Promise.resolve().then(() => require('tmp'));
        const tmpNameAsync = promisify(tmp.tmpName);
        tmp.setGracefulCleanup();
        const { downloadOSImage } = await Promise.resolve().then(() => require('../../utils/cloud'));
        const { getApplication } = await Promise.resolve().then(() => require('../../utils/sdk'));
        const logger = await command_2.default.getLogger();
        const balena = lazy_1.getBalenaSdk();
        options.application = options.application || options.app;
        delete options.app;
        const application = (await getApplication(balena, options['application'] ||
            (await (await Promise.resolve().then(() => require('../../utils/patterns'))).selectApplication()).id, {
            $expand: {
                is_for__device_type: {
                    $select: 'slug',
                },
            },
        }));
        const deviceUuid = balena.models.device.generateUniqueKey();
        console.info(`Registering to ${application.app_name}: ${deviceUuid}`);
        await balena.models.device.register(application.id, deviceUuid);
        const device = await balena.models.device.get(deviceUuid);
        const tmpPath = (await tmpNameAsync());
        try {
            logger.logDebug(`Downloading OS image...`);
            const osVersion = options['os-version'] || 'default';
            const deviceType = application.is_for__device_type[0].slug;
            await downloadOSImage(deviceType, tmpPath, osVersion);
            logger.logDebug(`Configuring OS image...`);
            await this.configureOsImage(tmpPath, device.uuid, options);
            logger.logDebug(`Writing OS image...`);
            await this.writeOsImage(tmpPath, deviceType, options);
        }
        catch (e) {
            try {
                logger.logDebug(`Process failed, removing device ${device.uuid}`);
                await balena.models.device.remove(device.uuid);
            }
            catch (e) {
            }
            throw e;
        }
        finally {
            logger.logDebug(`Removing temporary OS image download...`);
            await rimraf(tmpPath);
        }
        console.log('Done');
        return device.uuid;
    }
    async configureOsImage(path, uuid, options) {
        const configureCommand = ['os', 'configure', path, '--device', uuid];
        if (options.config) {
            configureCommand.push('--config', options.config);
        }
        else if (options.advanced) {
            configureCommand.push('--advanced');
        }
        await helpers_1.runCommand(configureCommand);
    }
    async writeOsImage(path, deviceType, options) {
        const osInitCommand = ['os', 'initialize', path, '--type', deviceType];
        if (options.yes) {
            osInitCommand.push('--yes');
        }
        if (options.drive) {
            osInitCommand.push('--drive', options.drive);
        }
        await helpers_1.runCommand(osInitCommand);
    }
}
exports.default = DeviceInitCmd;
DeviceInitCmd.description = lazy_1.stripIndent `
		Initialize a device with balenaOS.

		Initialize a device by downloading the OS image of a certain application
		and writing it to an SD Card.

		Note, if the application option is omitted it will be prompted
		for interactively.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
DeviceInitCmd.examples = [
    '$ balena device init',
    '$ balena device init --application MyApp',
    '$ balena device init -a myorg/myapp',
];
DeviceInitCmd.usage = 'device init';
DeviceInitCmd.flags = {
    application: cf.application,
    app: cf.app,
    yes: cf.yes,
    advanced: command_1.flags.boolean({
        char: 'v',
        description: 'show advanced configuration options',
    }),
    'os-version': command_1.flags.string({
        description: lazy_1.stripIndent `
				exact version number, or a valid semver range,
				or 'latest' (includes pre-releases),
				or 'default' (excludes pre-releases if at least one stable version is available),
				or 'recommended' (excludes pre-releases, will fail if only pre-release versions are available),
				or 'menu' (will show the interactive menu)
				`,
    }),
    drive: cf.drive,
    config: command_1.flags.string({
        description: 'path to the config JSON file, see `balena os build-config`',
    }),
    help: cf.help,
};
DeviceInitCmd.authenticated = true;
//# sourceMappingURL=init.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const validation_1 = require("../../utils/validation");
const errors_1 = require("../../errors");
class DeviceShutdownCmd extends command_1.default {
    async run() {
        var _a;
        const { args: params, flags: options } = this.parse(DeviceShutdownCmd);
        const balena = lazy_1.getBalenaSdk();
        try {
            await balena.models.device.shutdown(params.uuid, options);
        }
        catch (e) {
            if ((_a = e.message) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes('online')) {
                throw new errors_1.ExpectedError(`Device ${params.uuid} is not online`);
            }
            else {
                throw e;
            }
        }
    }
}
exports.default = DeviceShutdownCmd;
DeviceShutdownCmd.description = lazy_1.stripIndent `
		Shutdown a device.

		Remotely shutdown a device.
		`;
DeviceShutdownCmd.examples = ['$ balena device shutdown 23c73a1'];
DeviceShutdownCmd.args = [
    {
        name: 'uuid',
        description: 'the uuid of the device to shutdown',
        parse: (dev) => validation_1.tryAsInteger(dev),
        required: true,
    },
];
DeviceShutdownCmd.usage = 'device shutdown <uuid>';
DeviceShutdownCmd.flags = {
    force: cf.force,
    help: cf.help,
};
DeviceShutdownCmd.authenticated = true;
//# sourceMappingURL=shutdown.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const _ = require("lodash");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const oclif_utils_1 = require("../../utils/oclif-utils");
class DevicesSupportedCmd extends command_2.default {
    async run() {
        const { flags: options } = this.parse(DevicesSupportedCmd);
        const dts = await lazy_1.getBalenaSdk().models.config.getDeviceTypes();
        let deviceTypes = dts.map((d) => {
            if (d.aliases && d.aliases.length) {
                d.aliases = d.aliases.filter((alias) => alias !== d.slug);
                if (!options.json) {
                    d.aliases = [d.aliases.join(', ')];
                }
            }
            else {
                d.aliases = [];
            }
            return d;
        });
        if (!options.discontinued) {
            deviceTypes = deviceTypes.filter((dt) => dt.state !== 'DISCONTINUED');
        }
        const fields = options.verbose
            ? ['slug', 'aliases', 'arch', 'state', 'name']
            : ['slug', 'aliases', 'arch', 'name'];
        deviceTypes = _.sortBy(deviceTypes.map((d) => {
            const picked = _.pick(d, fields);
            picked.state = picked.state === 'BETA' ? 'NEW' : picked.state;
            return picked;
        }), fields);
        if (options.json) {
            console.log(JSON.stringify(deviceTypes, null, 4));
        }
        else {
            const visuals = lazy_1.getVisuals();
            const output = await visuals.table.horizontal(deviceTypes, fields);
            console.log(output);
        }
    }
}
exports.default = DevicesSupportedCmd;
DevicesSupportedCmd.description = lazy_1.stripIndent `
		List the supported device types (like 'raspberrypi3' or 'intel-nuc').

		List the supported device types (like 'raspberrypi3' or 'intel-nuc').

		The --verbose option adds extra columns/fields to the output, including the
		"STATE" column whose values are one of 'new', 'released' or 'discontinued'.
		However, 'discontinued' device types are only listed if the '--discontinued'
		option is used.

		The --json option is recommended when scripting the output of this command,
		because the JSON format is less likely to change and it better represents data
		types like lists and empty strings (for example, the ALIASES column contains a
		list of zero or more values). The 'jq' utility may be helpful in shell scripts
		(https://stedolan.github.io/jq/manual/).
`;
DevicesSupportedCmd.examples = [
    '$ balena devices supported',
    '$ balena devices supported --verbose',
    '$ balena devices supported -vj',
];
DevicesSupportedCmd.usage = ('devices supported ' +
    new oclif_utils_1.CommandHelp({ args: DevicesSupportedCmd.args }).defaultUsage()).trim();
DevicesSupportedCmd.flags = {
    discontinued: command_1.flags.boolean({
        description: 'include "discontinued" device types',
    }),
    help: cf.help,
    json: command_1.flags.boolean({
        char: 'j',
        description: 'produce JSON output instead of tabular output',
    }),
    verbose: command_1.flags.boolean({
        char: 'v',
        description: 'add extra columns in the tabular output (ALIASES, ARCH, STATE)',
    }),
};
//# sourceMappingURL=supported.js.map
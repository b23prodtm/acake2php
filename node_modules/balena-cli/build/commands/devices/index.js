"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const helpers_1 = require("../../utils/helpers");
const lazy_1 = require("../../utils/lazy");
const messages_1 = require("../../utils/messages");
class DevicesCmd extends command_1.default {
    async run() {
        const { flags: options } = this.parse(DevicesCmd);
        const balena = lazy_1.getBalenaSdk();
        options.application = options.application || options.app;
        delete options.app;
        let devices;
        if (options.application != null) {
            const { getApplication } = await Promise.resolve().then(() => require('../../utils/sdk'));
            const application = await getApplication(balena, options.application);
            devices = (await balena.models.device.getAllByApplication(application.id, helpers_1.expandForAppName));
        }
        else {
            devices = (await balena.models.device.getAll(helpers_1.expandForAppName));
        }
        devices = devices.map(function (device) {
            var _a, _b, _c;
            device.dashboard_url = balena.models.device.getDashboardUrl(device.uuid);
            const belongsToApplication = device.belongs_to__application;
            device.application_name = ((_a = belongsToApplication === null || belongsToApplication === void 0 ? void 0 : belongsToApplication[0]) === null || _a === void 0 ? void 0 : _a.app_name) || null;
            device.uuid = options.json ? device.uuid : device.uuid.slice(0, 7);
            device.device_type = ((_c = (_b = device.is_of__device_type) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.slug) || null;
            return device;
        });
        const fields = [
            'id',
            'uuid',
            'device_name',
            'device_type',
            'application_name',
            'status',
            'is_online',
            'supervisor_version',
            'os_version',
            'dashboard_url',
        ];
        const _ = await Promise.resolve().then(() => require('lodash'));
        if (options.json) {
            console.log(JSON.stringify(devices.map((device) => _.pick(device, fields)), null, 4));
        }
        else {
            console.log(lazy_1.getVisuals().table.horizontal(devices.map((dev) => _.mapValues(dev, (val) => val !== null && val !== void 0 ? val : 'N/a')), fields));
        }
    }
}
exports.default = DevicesCmd;
DevicesCmd.description = lazy_1.stripIndent `
		List all devices.

		list all devices that belong to you.

		You can filter the devices by application by using the \`--application\` option.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}

		${messages_1.jsonInfo.split('\n').join('\n\t\t')}
	`;
DevicesCmd.examples = [
    '$ balena devices',
    '$ balena devices --application MyApp',
    '$ balena devices --app MyApp',
    '$ balena devices -a MyApp',
    '$ balena devices -a myorg/myapp',
];
DevicesCmd.usage = 'devices';
DevicesCmd.flags = {
    application: cf.application,
    app: cf.app,
    json: cf.json,
    help: cf.help,
};
DevicesCmd.primary = true;
DevicesCmd.authenticated = true;
//# sourceMappingURL=index.js.map
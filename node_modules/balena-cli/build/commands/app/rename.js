"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const ca = require("../../utils/common-args");
const lazy_1 = require("../../utils/lazy");
const messages_1 = require("../../utils/messages");
class AppRenameCmd extends command_1.default {
    async run() {
        var _a;
        const { args: params } = this.parse(AppRenameCmd);
        const { validateApplicationName } = await Promise.resolve().then(() => require('../../utils/validation'));
        const { ExpectedError } = await Promise.resolve().then(() => require('../../errors'));
        const balena = lazy_1.getBalenaSdk();
        const { getApplication } = await Promise.resolve().then(() => require('../../utils/sdk'));
        const application = await getApplication(balena, params.application, {
            $expand: {
                application_type: {
                    $select: ['is_legacy'],
                },
            },
        });
        if (!application) {
            throw new ExpectedError('Error: application ${params.nameOrSlug} not found.');
        }
        const appType = (_a = application.application_type) === null || _a === void 0 ? void 0 : _a[0];
        if (appType.is_legacy) {
            throw new ExpectedError(`Application ${params.application} is of 'legacy' type, and cannot be renamed.`);
        }
        const newName = params.newName ||
            (await lazy_1.getCliForm().ask({
                message: 'Please enter the new name for this application:',
                type: 'input',
                validate: validateApplicationName,
            })) ||
            '';
        try {
            await balena.models.application.rename(application.id, newName);
        }
        catch (e) {
            if ((e.message || '').toLowerCase().includes('unique')) {
                throw new ExpectedError(`Error: application ${params.application} already exists.`);
            }
            throw e;
        }
        const renamedApplication = await balena.models.application.get(application.id);
        console.log(`Application renamed`);
        console.log('From:');
        console.log(`\tname: ${application.app_name}`);
        console.log(`\tslug: ${application.slug}`);
        console.log('To:');
        console.log(`\tname: ${renamedApplication.app_name}`);
        console.log(`\tslug: ${renamedApplication.slug}`);
    }
}
exports.default = AppRenameCmd;
AppRenameCmd.description = lazy_1.stripIndent `
		Rename an application.

		Rename an application.

		Note, if the \`newName\` parameter is omitted, it will be
		prompted for interactively.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
AppRenameCmd.examples = [
    '$ balena app rename OldName',
    '$ balena app rename OldName NewName',
    '$ balena app rename myorg/oldname NewName',
];
AppRenameCmd.args = [
    ca.applicationRequired,
    {
        name: 'newName',
        description: 'the new name for the application',
    },
];
AppRenameCmd.usage = 'app rename <application> [newName]';
AppRenameCmd.flags = {
    help: cf.help,
};
AppRenameCmd.authenticated = true;
//# sourceMappingURL=rename.js.map
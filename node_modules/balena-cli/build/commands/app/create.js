"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const errors_1 = require("../../errors");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class AppCreateCmd extends command_2.default {
    async run() {
        var _a;
        const { args: params, flags: options } = this.parse(AppCreateCmd);
        const deviceType = options.type ||
            (await (await Promise.resolve().then(() => require('../../utils/patterns'))).selectDeviceType());
        const organization = ((_a = options.organization) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || (await this.getOrganization());
        let application;
        try {
            application = await lazy_1.getBalenaSdk().models.application.create({
                name: params.name,
                deviceType,
                organization,
            });
        }
        catch (err) {
            if ((err.message || '').toLowerCase().includes('unique')) {
                throw new errors_1.ExpectedError(`Error: application "${params.name}" already exists in organization "${organization}".`);
            }
            else if ((err.message || '').toLowerCase().includes('unauthorized')) {
                throw new errors_1.ExpectedError(`Error: You are not authorized to create applications in organization "${organization}".`);
            }
            throw err;
        }
        const { isV13 } = await Promise.resolve().then(() => require('../../utils/version'));
        console.log(isV13()
            ? `Application created: slug "${application.slug}", device type "${deviceType}"`
            : `Application created: ${application.slug} (${deviceType}, id ${application.id})`);
    }
    async getOrganization() {
        const { getOwnOrganizations } = await Promise.resolve().then(() => require('../../utils/sdk'));
        const organizations = await getOwnOrganizations(lazy_1.getBalenaSdk());
        if (organizations.length === 0) {
            throw new Error('This account is not a member of any organizations');
        }
        else if (organizations.length === 1) {
            return organizations[0].handle;
        }
        else {
            const { selectOrganization } = await Promise.resolve().then(() => require('../../utils/patterns'));
            return selectOrganization(organizations);
        }
    }
}
exports.default = AppCreateCmd;
AppCreateCmd.description = lazy_1.stripIndent `
		Create an application.

		Create a new balena application.

		You can specify the organization the application should belong to using
		the \`--organization\` option. The organization's handle, not its name,
		should be provided. Organization handles can be listed with the
		\`balena orgs\` command.

		The application's default device type is specified with the \`--type\` option.
		The \`balena devices supported\` command can be used to list the available
		device types.

		Interactive dropdowns will be shown for selection if no device type or
		organization is specified and there are multiple options to choose from.
		If there is a single option to choose from, it will be chosen automatically.
		This interactive behavior can be disabled by explicitly specifying a device
		type and organization.
	`;
AppCreateCmd.examples = [
    '$ balena app create MyApp',
    '$ balena app create MyApp --organization mmyorg',
    '$ balena app create MyApp -o myorg --type raspberry-pi',
];
AppCreateCmd.args = [
    {
        name: 'name',
        description: 'application name',
        required: true,
    },
];
AppCreateCmd.usage = 'app create <name>';
AppCreateCmd.flags = {
    organization: command_1.flags.string({
        char: 'o',
        description: 'handle of the organization the application should belong to',
    }),
    type: command_1.flags.string({
        char: 't',
        description: 'application device type (Check available types with `balena devices supported`)',
    }),
    help: cf.help,
};
AppCreateCmd.authenticated = true;
//# sourceMappingURL=create.js.map
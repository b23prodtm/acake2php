"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../command");
const cf = require("../utils/common-flags");
const lazy_1 = require("../utils/lazy");
const errors_1 = require("../errors");
class LoginCmd extends command_2.default {
    async run() {
        const { flags: options, args: params } = this.parse(LoginCmd);
        const balena = lazy_1.getBalenaSdk();
        const messages = await Promise.resolve().then(() => require('../utils/messages'));
        const balenaUrl = await balena.settings.get('balenaUrl');
        if (options.user != null) {
            options.email = options.user;
        }
        console.log(messages.balenaAsciiArt);
        console.log(`\nLogging in to ${balenaUrl}`);
        await this.doLogin(options, balenaUrl, params.token);
        const username = await balena.auth.whoami();
        console.info(`Successfully logged in as: ${username}`);
        console.info(`\

Find out about the available commands by running:

  $ balena help

${messages.reachingOut}`);
    }
    async doLogin(loginOptions, balenaUrl = 'balena-cloud.com', token) {
        if (loginOptions.token) {
            if (!token) {
                token = await lazy_1.getCliForm().ask({
                    message: 'Session token or API key from the preferences page',
                    name: 'token',
                    type: 'input',
                });
            }
            const balena = lazy_1.getBalenaSdk();
            await balena.auth.loginWithToken(token);
            if (!(await balena.auth.whoami())) {
                throw new errors_1.ExpectedError('Token authentication failed');
            }
            return;
        }
        else if (loginOptions.credentials) {
            const patterns = await Promise.resolve().then(() => require('../utils/patterns'));
            return patterns.authenticate(loginOptions);
        }
        else if (loginOptions.web) {
            const auth = await Promise.resolve().then(() => require('../auth'));
            await auth.login({ port: loginOptions.port });
            return;
        }
        else {
            const patterns = await Promise.resolve().then(() => require('../utils/patterns'));
            const loginType = await patterns.askLoginType();
            if (loginType === 'register') {
                const open = await Promise.resolve().then(() => require('open'));
                const signupUrl = `https://dashboard.${balenaUrl}/signup`;
                open(signupUrl, { wait: false });
                throw new errors_1.ExpectedError(`Please sign up at ${signupUrl}`);
            }
            loginOptions[loginType] = true;
            return this.doLogin(loginOptions);
        }
    }
}
exports.default = LoginCmd;
LoginCmd.description = lazy_1.stripIndent `
		Login to balena.

		Login to your balena account.

		This command will prompt you to login using the following login types:

		- Web authorization: open your web browser and prompt to authorize the CLI
		from the dashboard.

		- Credentials: using email/password and 2FA.

		- Token: using a session token or API key from the preferences page.
`;
LoginCmd.examples = [
    '$ balena login',
    '$ balena login --web',
    '$ balena login --token "..."',
    '$ balena login --credentials',
    '$ balena login --credentials --email johndoe@gmail.com --password secret',
];
LoginCmd.args = [
    {
        name: 'token',
        hidden: true,
    },
];
LoginCmd.usage = 'login';
LoginCmd.flags = {
    web: command_1.flags.boolean({
        default: false,
        char: 'w',
        description: 'web-based login',
        exclusive: ['token', 'credentials'],
    }),
    token: command_1.flags.boolean({
        default: false,
        char: 't',
        description: 'session token or API key',
        exclusive: ['web', 'credentials'],
    }),
    credentials: command_1.flags.boolean({
        default: false,
        char: 'c',
        description: 'credential-based login',
        exclusive: ['web', 'token'],
    }),
    email: command_1.flags.string({
        char: 'e',
        description: 'email',
        exclusive: ['user'],
        dependsOn: ['credentials'],
    }),
    user: command_1.flags.string({
        char: 'u',
        hidden: true,
        exclusive: ['email'],
        dependsOn: ['credentials'],
    }),
    password: command_1.flags.string({
        char: 'p',
        description: 'password',
        dependsOn: ['credentials'],
    }),
    port: command_1.flags.integer({
        char: 'P',
        description: 'TCP port number of local HTTP login server (--web auth only)',
        dependsOn: ['web'],
    }),
    help: cf.help,
};
LoginCmd.primary = true;
//# sourceMappingURL=login.js.map
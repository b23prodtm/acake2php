"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class ConfigReadCmd extends command_2.default {
    async run() {
        const { flags: options } = this.parse(ConfigReadCmd);
        const { promisify } = await Promise.resolve().then(() => require('util'));
        const umountAsync = promisify((await Promise.resolve().then(() => require('umount'))).umount);
        const drive = options.drive || (await lazy_1.getVisuals().drive('Select the device drive'));
        await umountAsync(drive);
        const config = await Promise.resolve().then(() => require('balena-config-json'));
        const configJSON = await config.read(drive, options.type);
        const prettyjson = await Promise.resolve().then(() => require('prettyjson'));
        console.info(prettyjson.render(configJSON));
    }
}
exports.default = ConfigReadCmd;
ConfigReadCmd.description = lazy_1.stripIndent `
		Read the configuration of a device or OS image.

		Read the config.json file from the mounted filesystem,
		e.g. the SD card of a provisioned device or balenaOS image.
	`;
ConfigReadCmd.examples = [
    '$ balena config read --type raspberrypi3',
    '$ balena config read --type raspberrypi3 --drive /dev/disk2',
];
ConfigReadCmd.usage = 'config read';
ConfigReadCmd.flags = {
    type: command_1.flags.string({
        description: 'device type (Check available types with `balena devices supported`)',
        char: 't',
        required: true,
    }),
    drive: command_1.flags.string({
        description: 'device filesystem or OS image location',
        char: 'd',
    }),
    help: cf.help,
};
ConfigReadCmd.authenticated = true;
ConfigReadCmd.root = true;
//# sourceMappingURL=read.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class ConfigReconfigureCmd extends command_2.default {
    async run() {
        const { flags: options } = this.parse(ConfigReconfigureCmd);
        const { promisify } = await Promise.resolve().then(() => require('util'));
        const umountAsync = promisify((await Promise.resolve().then(() => require('umount'))).umount);
        const drive = options.drive || (await lazy_1.getVisuals().drive('Select the device drive'));
        await umountAsync(drive);
        const config = await Promise.resolve().then(() => require('balena-config-json'));
        const { uuid } = await config.read(drive, options.type);
        await umountAsync(drive);
        const configureCommand = ['os', 'configure', drive, '--device', uuid];
        if (options.advanced) {
            configureCommand.push('--advanced');
        }
        const { runCommand } = await Promise.resolve().then(() => require('../../utils/helpers'));
        await runCommand(configureCommand);
        console.info('Done');
    }
}
exports.default = ConfigReconfigureCmd;
ConfigReconfigureCmd.description = lazy_1.stripIndent `
		Interactively reconfigure a device or OS image.

		Interactively reconfigure a provisioned device or OS image.
`;
ConfigReconfigureCmd.examples = [
    '$ balena config reconfigure --type raspberrypi3',
    '$ balena config reconfigure --type raspberrypi3 --advanced',
    '$ balena config reconfigure --type raspberrypi3 --drive /dev/disk2',
];
ConfigReconfigureCmd.usage = 'config reconfigure';
ConfigReconfigureCmd.flags = {
    type: command_1.flags.string({
        description: 'device type (Check available types with `balena devices supported`)',
        char: 't',
        required: true,
    }),
    drive: command_1.flags.string({
        description: 'device filesystem or OS image location',
        char: 'd',
    }),
    advanced: command_1.flags.boolean({
        description: 'show advanced commands',
        char: 'v',
    }),
    help: cf.help,
};
ConfigReconfigureCmd.authenticated = true;
ConfigReconfigureCmd.root = true;
//# sourceMappingURL=reconfigure.js.map
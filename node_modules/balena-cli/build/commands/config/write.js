"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class ConfigWriteCmd extends command_2.default {
    async run() {
        const { args: params, flags: options } = this.parse(ConfigWriteCmd);
        const { promisify } = await Promise.resolve().then(() => require('util'));
        const umountAsync = promisify((await Promise.resolve().then(() => require('umount'))).umount);
        const drive = options.drive || (await lazy_1.getVisuals().drive('Select the device drive'));
        await umountAsync(drive);
        const config = await Promise.resolve().then(() => require('balena-config-json'));
        const configJSON = await config.read(drive, options.type);
        console.info(`Setting ${params.key} to ${params.value}`);
        const _ = await Promise.resolve().then(() => require('lodash'));
        _.set(configJSON, params.key, params.value);
        await umountAsync(drive);
        await config.write(drive, options.type, configJSON);
        console.info('Done');
    }
}
exports.default = ConfigWriteCmd;
ConfigWriteCmd.description = lazy_1.stripIndent `
		Write a key-value pair to configuration of a device or OS image.

		Write a key-value pair to the config.json file on the mounted filesystem,
		e.g. the SD card of a provisioned device or balenaOS image.
	`;
ConfigWriteCmd.examples = [
    '$ balena config write --type raspberrypi3 username johndoe',
    '$ balena config write --type raspberrypi3 --drive /dev/disk2 username johndoe',
    '$ balena config write --type raspberrypi3 files.network/settings "..."',
];
ConfigWriteCmd.args = [
    {
        name: 'key',
        description: 'the key of the config parameter to write',
        required: true,
    },
    {
        name: 'value',
        description: 'the value of the config parameter to write',
        required: true,
    },
];
ConfigWriteCmd.usage = 'config write <key> <value>';
ConfigWriteCmd.flags = {
    type: command_1.flags.string({
        description: 'device type (Check available types with `balena devices supported`)',
        char: 't',
        required: true,
    }),
    drive: command_1.flags.string({
        description: 'device filesystem or OS image location',
        char: 'd',
    }),
    help: cf.help,
};
ConfigWriteCmd.authenticated = true;
ConfigWriteCmd.root = true;
//# sourceMappingURL=write.js.map
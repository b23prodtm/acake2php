import { flags } from '@oclif/command';
import Command from '../command';
import type { BalenaSDK } from 'balena-sdk';
import { RegistrySecrets } from 'resin-multibuild';
import { lowercaseIfSlug } from '../utils/normalization';
declare enum BuildTarget {
    Cloud = 0,
    Device = 1
}
interface FlagsDef {
    source: string;
    emulated: boolean;
    dockerfile?: string;
    nocache: boolean;
    pull: boolean;
    'noparent-check': boolean;
    'registry-secrets'?: string;
    gitignore?: boolean;
    nogitignore?: boolean;
    nolive: boolean;
    detached: boolean;
    service?: string[];
    system: boolean;
    env?: string[];
    'convert-eol'?: boolean;
    'noconvert-eol': boolean;
    'multi-dockerignore': boolean;
    'release-tag'?: string[];
    help: void;
}
export default class PushCmd extends Command {
    static description: string;
    static examples: string[];
    static args: {
        name: string;
        description: string;
        required: boolean;
        parse: typeof lowercaseIfSlug;
    }[];
    static usage: string;
    static flags: flags.Input<FlagsDef>;
    static primary: boolean;
    run(): Promise<void>;
    protected pushToCloud(appNameOrSlug: string, options: FlagsDef, sdk: BalenaSDK, dockerfilePath: string, registrySecrets: RegistrySecrets): Promise<void>;
    protected pushToDevice(localDeviceAddress: string, options: FlagsDef, dockerfilePath: string, registrySecrets: RegistrySecrets): Promise<void>;
    protected getBuildTarget(appOrDevice: string): Promise<BuildTarget>;
    protected checkInvalidOptions(invalidOptions: Array<keyof FlagsDef>, options: FlagsDef, errorMessage: string): void;
}
export {};

import { flags } from '@oclif/command';
import Command from '../command';
import type { Application, BalenaSDK } from 'balena-sdk';
import type { ComposeCliFlags, ComposeOpts } from '../utils/compose-types';
import type { BuildOpts, DockerCliFlags } from '../utils/docker';
interface FlagsDef extends ComposeCliFlags, DockerCliFlags {
    arch?: string;
    deviceType?: string;
    application?: string;
    source?: string;
    help: void;
}
export default class BuildCmd extends Command {
    static description: string;
    static examples: string[];
    static args: {
        name: string;
        description: string;
    }[];
    static usage: string;
    static flags: flags.Input<FlagsDef>;
    static primary: boolean;
    run(): Promise<void>;
    protected validateOptions(opts: FlagsDef, sdk: BalenaSDK): Promise<void>;
    protected getAppAndResolveArch(opts: FlagsDef): Promise<(Application & {
        is_for__device_type: [import("balena-sdk").DeviceType];
    } & {
        arch: string;
    }) | undefined>;
    protected prepareBuild(options: FlagsDef): Promise<{
        docker: import("docker-toolbelt");
        buildOpts: BuildOpts;
        composeOpts: {
            projectName: any;
            projectPath: string;
            inlineLogs: boolean;
            convertEol: boolean;
            dockerfilePath: any;
            multiDockerignore: boolean;
            nogitignore: boolean;
            noParentCheck: any;
        };
    }>;
    protected buildProject(docker: import('docker-toolbelt'), logger: import('../utils/logger'), composeOpts: ComposeOpts, opts: {
        app?: Application;
        arch: string;
        deviceType: string;
        buildEmulated: boolean;
        buildOpts: BuildOpts;
    }): Promise<void>;
}
export {};

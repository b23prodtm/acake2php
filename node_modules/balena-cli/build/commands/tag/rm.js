"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const messages_1 = require("../../utils/messages");
class TagRmCmd extends command_1.default {
    async run() {
        const { args: params, flags: options } = this.parse(TagRmCmd);
        options.application = options.application || options.app;
        delete options.app;
        const balena = lazy_1.getBalenaSdk();
        if (!options.application && !options.device && !options.release) {
            const { ExpectedError } = await Promise.resolve().then(() => require('../../errors'));
            throw new ExpectedError(TagRmCmd.missingResourceMessage);
        }
        const { tryAsInteger } = await Promise.resolve().then(() => require('../../utils/validation'));
        if (options.application) {
            const { getTypedApplicationIdentifier } = await Promise.resolve().then(() => require('../../utils/sdk'));
            return balena.models.application.tags.remove(await getTypedApplicationIdentifier(balena, options.application), params.tagKey);
        }
        if (options.device) {
            return balena.models.device.tags.remove(tryAsInteger(options.device), params.tagKey);
        }
        if (options.release) {
            const { disambiguateReleaseParam } = await Promise.resolve().then(() => require('../../utils/normalization'));
            const releaseParam = await disambiguateReleaseParam(balena, options.release);
            return balena.models.release.tags.remove(releaseParam, params.tagKey);
        }
    }
}
exports.default = TagRmCmd;
TagRmCmd.description = lazy_1.stripIndent `
		Remove a tag from an application, device or release.

		Remove a tag from an application, device or release.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
TagRmCmd.examples = [
    '$ balena tag rm myTagKey --application MyApp',
    '$ balena tag rm myTagKey -a myorg/myapp',
    '$ balena tag rm myTagKey --device 7cf02a6',
    '$ balena tag rm myTagKey --release 1234',
    '$ balena tag rm myTagKey --release b376b0e544e9429483b656490e5b9443b4349bd6',
];
TagRmCmd.args = [
    {
        name: 'tagKey',
        description: 'the key string of the tag',
        required: true,
    },
];
TagRmCmd.usage = 'tag rm <tagKey>';
TagRmCmd.flags = {
    application: {
        ...cf.application,
        exclusive: ['app', 'device', 'release'],
    },
    app: {
        ...cf.app,
        exclusive: ['application', 'device', 'release'],
    },
    device: {
        ...cf.device,
        exclusive: ['app', 'application', 'release'],
    },
    release: {
        ...cf.release,
        exclusive: ['app', 'application', 'device'],
    },
    help: cf.help,
};
TagRmCmd.authenticated = true;
TagRmCmd.missingResourceMessage = lazy_1.stripIndent `
					To remove a resource tag, you must provide exactly one of:

					  * An application, with --application <appNameOrSlug>
					  * A device, with --device <uuid>
					  * A release, with --release <id or commit>

					See the help page for examples:

					  $ balena help tag rm
	`;
//# sourceMappingURL=rm.js.map
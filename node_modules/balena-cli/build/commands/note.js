"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../command");
const errors_1 = require("../errors");
const cf = require("../utils/common-flags");
const lazy_1 = require("../utils/lazy");
class NoteCmd extends command_2.default {
    async run() {
        const { args: params, flags: options } = this.parse(NoteCmd);
        params.note = params.note || this.stdin;
        if (params.note.length === 0) {
            throw new errors_1.ExpectedError('Missing note content');
        }
        options.device = options.device || options.dev;
        delete options.dev;
        if (options.device == null || options.device.length === 0) {
            throw new errors_1.ExpectedError('Missing device UUID (--device)');
        }
        const balena = lazy_1.getBalenaSdk();
        return balena.models.device.note(options.device, params.note);
    }
}
exports.default = NoteCmd;
NoteCmd.description = lazy_1.stripIndent `
		Set a device note.

		Set or update a device note. If the note argument is not provided,
		it will be read from stdin.

		To view device notes, use the \`balena device <uuid>\` command.
	`;
NoteCmd.examples = [
    '$ balena note "My useful note" --device 7cf02a6',
    '$ cat note.txt | balena note --device 7cf02a6',
];
NoteCmd.args = [
    {
        name: 'note',
        description: 'note content',
    },
];
NoteCmd.usage = 'note <|note>';
NoteCmd.flags = {
    device: { exclusive: ['dev'], ...cf.device },
    dev: command_1.flags.string({
        exclusive: ['device'],
        hidden: true,
    }),
    help: cf.help,
};
NoteCmd.authenticated = true;
NoteCmd.readStdin = true;
//# sourceMappingURL=note.js.map
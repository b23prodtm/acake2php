"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const validation_1 = require("../../utils/validation");
class KeyRmCmd extends command_1.default {
    async run() {
        var _a;
        const { args: params, flags: options } = this.parse(KeyRmCmd);
        const patterns = await Promise.resolve().then(() => require('../../utils/patterns'));
        await patterns.confirm((_a = options.yes) !== null && _a !== void 0 ? _a : false, `Are you sure you want to delete key ${params.id}?`);
        await lazy_1.getBalenaSdk().models.key.remove(params.id);
    }
}
exports.default = KeyRmCmd;
KeyRmCmd.description = lazy_1.stripIndent `
		Remove an SSH key from balenaCloud.

		Remove a single SSH key registered in balenaCloud for the logged in user.

		The --yes option may be used to avoid interactive confirmation.
	`;
KeyRmCmd.examples = ['$ balena key rm 17', '$ balena key rm 17 --yes'];
KeyRmCmd.args = [
    {
        name: 'id',
        description: 'balenaCloud ID for the SSH key',
        parse: (x) => validation_1.parseAsInteger(x, 'id'),
        required: true,
    },
];
KeyRmCmd.usage = 'key rm <id>';
KeyRmCmd.flags = {
    yes: cf.yes,
    help: cf.help,
};
KeyRmCmd.authenticated = true;
//# sourceMappingURL=rm.js.map
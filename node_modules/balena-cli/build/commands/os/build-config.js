"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const _ = require("lodash");
class OsBuildConfigCmd extends command_2.default {
    async run() {
        const { args: params, flags: options } = this.parse(OsBuildConfigCmd);
        const { writeFile } = (await Promise.resolve().then(() => require('fs'))).promises;
        const config = await this.buildConfig(params.image, params['device-type'], options.advanced);
        await writeFile(options.output, JSON.stringify(config, null, 4));
        console.info(`Config file "${options.output}" created successfully.`);
    }
    async buildConfig(image, deviceTypeSlug, advanced) {
        advanced = advanced || false;
        const { getManifest } = await Promise.resolve().then(() => require('../../utils/helpers'));
        const deviceTypeManifest = await getManifest(image, deviceTypeSlug);
        return this.buildConfigForDeviceType(deviceTypeManifest, advanced);
    }
    async buildConfigForDeviceType(deviceTypeManifest, advanced) {
        advanced !== null && advanced !== void 0 ? advanced : (advanced = false);
        let override;
        const questions = deviceTypeManifest.options;
        if (!advanced) {
            const advancedGroup = _.find(questions, {
                name: 'advanced',
                isGroup: true,
            });
            if (advancedGroup != null) {
                const { getGroupDefaults } = await Promise.resolve().then(() => require('../../utils/helpers'));
                override = getGroupDefaults(advancedGroup);
            }
        }
        return lazy_1.getCliForm().run(questions, { override });
    }
}
exports.default = OsBuildConfigCmd;
OsBuildConfigCmd.description = lazy_1.stripIndent `
		Build an OS config and save it to a JSON file.

		Interactively generate an OS config once, so that the generated config
		file can be used in \`balena os configure\`, skipping the interactive part.
	`;
OsBuildConfigCmd.examples = [
    '$ balena os build-config ../path/rpi3.img raspberrypi3 --output rpi3-config.json',
    '$ balena os configure ../path/rpi3.img --device 7cf02a6 --config rpi3-config.json',
];
OsBuildConfigCmd.args = [
    {
        name: 'image',
        description: 'os image',
        required: true,
    },
    {
        name: 'device-type',
        description: 'device type',
        required: true,
    },
];
OsBuildConfigCmd.usage = 'os build-config <image> <device-type>';
OsBuildConfigCmd.flags = {
    advanced: command_1.flags.boolean({
        description: 'show advanced configuration options',
        char: 'v',
    }),
    output: command_1.flags.string({
        description: 'path to output JSON file',
        char: 'o',
        required: true,
    }),
    help: cf.help,
};
OsBuildConfigCmd.authenticated = true;
//# sourceMappingURL=build-config.js.map
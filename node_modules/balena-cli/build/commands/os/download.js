"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class OsDownloadCmd extends command_2.default {
    async run() {
        const { args: params, flags: options } = this.parse(OsDownloadCmd);
        const { downloadOSImage } = await Promise.resolve().then(() => require('../../utils/cloud'));
        await downloadOSImage(params.type, options.output, options.version);
    }
}
exports.default = OsDownloadCmd;
OsDownloadCmd.description = lazy_1.stripIndent `
		Download an unconfigured OS image.

		Download an unconfigured OS image for a certain device type.
		Check available types with \`balena devices supported\`

		Note: Currently this command only works with balenaCloud, not openBalena.
		If using openBalena, please download the OS from: https://www.balena.io/os/

		If version is not specified the newest stable (non-pre-release) version of OS
		is downloaded (if available), otherwise the newest version (if all existing
		versions for the given device type are pre-release).

		You can pass \`--version menu\` to pick the OS version from the interactive menu
		of all available versions.

		To download a development image append \`.dev\` to the version or select from
		the interactive menu.
`;
OsDownloadCmd.examples = [
    '$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img',
    '$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version 2.60.1+rev1',
    '$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version 2.60.1+rev1.dev',
    '$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version ^2.60.0',
    '$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version latest',
    '$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version default',
    '$ balena os download raspberrypi3 -o ../foo/bar/raspberry-pi.img --version menu',
];
OsDownloadCmd.args = [
    {
        name: 'type',
        description: 'the device type',
        required: true,
    },
];
OsDownloadCmd.usage = 'os download <type>';
OsDownloadCmd.flags = {
    output: command_1.flags.string({
        description: 'output path',
        char: 'o',
        required: true,
    }),
    version: command_1.flags.string({
        description: lazy_1.stripIndent `
				exact version number, or a valid semver range,
				or 'latest' (includes pre-releases),
				or 'default' (excludes pre-releases if at least one stable version is available),
				or 'recommended' (excludes pre-releases, will fail if only pre-release versions are available),
				or 'menu' (will show the interactive menu)
				`,
    }),
    help: cf.help,
};
//# sourceMappingURL=download.js.map
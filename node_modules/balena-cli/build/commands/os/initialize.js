"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const INIT_WARNING_MESSAGE = `

Note: Initializing the device may ask for administrative permissions
because we need to access the raw devices directly.\
`;
class OsInitializeCmd extends command_2.default {
    async run() {
        var _a;
        const { args: params, flags: options } = this.parse(OsInitializeCmd);
        const { promisify } = await Promise.resolve().then(() => require('util'));
        const umountAsync = promisify((await Promise.resolve().then(() => require('umount'))).umount);
        const { getManifest, sudo } = await Promise.resolve().then(() => require('../../utils/helpers'));
        console.info(`Initializing device ${INIT_WARNING_MESSAGE}`);
        const manifest = await getManifest(params.image, options.type);
        const answers = await lazy_1.getCliForm().run((_a = manifest.initialization) === null || _a === void 0 ? void 0 : _a.options, {
            override: {
                drive: options.drive,
            },
        });
        if (answers.drive != null) {
            const { confirm } = await Promise.resolve().then(() => require('../../utils/patterns'));
            await confirm(options.yes, `This will erase ${answers.drive}. Are you sure?`, `Going to erase ${answers.drive}.`, true);
            await umountAsync(answers.drive);
        }
        await sudo([
            'internal',
            'osinit',
            params.image,
            options.type,
            JSON.stringify(answers),
        ]);
        if (answers.drive != null) {
            await umountAsync(answers.drive);
            console.info(`You can safely remove ${answers.drive} now`);
        }
    }
}
exports.default = OsInitializeCmd;
OsInitializeCmd.description = lazy_1.stripIndent `
		Initialize an os image for a device.

		Initialize an os image for a device with a previously
		configured operating system image.
		${INIT_WARNING_MESSAGE}
	`;
OsInitializeCmd.examples = [
    '$ balena os initialize ../path/rpi.img --type raspberry-pi',
];
OsInitializeCmd.args = [
    {
        name: 'image',
        description: 'path to OS image',
        required: true,
    },
];
OsInitializeCmd.usage = 'os initialize <image>';
OsInitializeCmd.flags = {
    type: command_1.flags.string({
        description: 'device type (Check available types with `balena devices supported`)',
        char: 't',
        required: true,
    }),
    drive: cf.drive,
    yes: cf.yes,
    help: cf.help,
};
OsInitializeCmd.authenticated = true;
//# sourceMappingURL=initialize.js.map
import { flags } from '@oclif/command';
import Command from '../command';
import type { ComposeCliFlags, ComposeOpts } from '../utils/compose-types';
import type { DockerCliFlags } from '../utils/docker';
import type { Application, Release } from 'balena-sdk';
interface ApplicationWithArch extends Application {
    arch: string;
}
interface FlagsDef extends ComposeCliFlags, DockerCliFlags {
    source?: string;
    build: boolean;
    nologupload: boolean;
    'release-tag'?: string[];
    help: void;
}
export default class DeployCmd extends Command {
    static description: string;
    static examples: string[];
    static args: ({
        name: string;
        description: string;
        required: boolean;
    } | {
        name: string;
        description: string;
        required?: undefined;
    })[];
    static usage: string;
    static flags: flags.Input<FlagsDef>;
    static authenticated: boolean;
    static primary: boolean;
    run(): Promise<void>;
    deployProject(docker: import('docker-toolbelt'), logger: import('../utils/logger'), composeOpts: ComposeOpts, opts: {
        app: ApplicationWithArch;
        appName: string;
        image?: string;
        dockerfilePath?: string;
        shouldPerformBuild: boolean;
        shouldUploadLogs: boolean;
        buildEmulated: boolean;
        buildOpts: any;
    }): Promise<Release | Pick<import("balena-release/build/models").ReleaseModel, "id" | "status" | "commit" | "composition" | "source" | "start_timestamp" | "end_timestamp">>;
}
export {};

/// <reference types="bluebird" />
import { flags } from '@oclif/command';
import Command from '../command';
import type { DockerConnectionCliFlags } from '../utils/docker';
import type { Application, BalenaSDK, DeviceTypeJson, PineExpand, Release } from 'balena-sdk';
import type { Preloader } from 'balena-preload';
interface FlagsDef extends DockerConnectionCliFlags {
    app?: string;
    commit?: string;
    'splash-image'?: string;
    'dont-check-arch': boolean;
    'pin-device-to-release': boolean;
    'additional-space'?: number;
    'add-certificate'?: string[];
    help: void;
}
export default class PreloadCmd extends Command {
    static description: string;
    static examples: string[];
    static args: {
        name: string;
        description: string;
        required: boolean;
    }[];
    static usage: string;
    static flags: flags.Input<FlagsDef>;
    static authenticated: boolean;
    static primary: boolean;
    run(): Promise<void>;
    readonly applicationExpandOptions: PineExpand<Application>;
    allDeviceTypes: DeviceTypeJson.DeviceType[];
    getDeviceTypes(): Promise<DeviceTypeJson.DeviceType[]>;
    isCurrentCommit(commit: string): boolean;
    getDeviceTypesWithSameArch(deviceTypeSlug: string): Promise<string[]>;
    getApplicationsWithSuccessfulBuilds(deviceTypeSlug: string): Promise<(Application & {
        is_for__device_type: [import("balena-sdk").DeviceType];
    } & {
        should_be_running__release: [Release?];
    })[]>;
    selectApplication(deviceTypeSlug: string): Promise<Application & {
        is_for__device_type: [import("balena-sdk").DeviceType];
    } & {
        should_be_running__release: [(Release | undefined)?];
    }>;
    selectApplicationCommit(releases: Release[]): import("bluebird")<string>;
    offerToDisableAutomaticUpdates(application: Application, commit: string, pinDevice: boolean): Promise<"OK" | undefined>;
    getAppWithReleases(balenaSdk: BalenaSDK, appId: string | number): Promise<Application & {
        should_be_running__release: [Release?];
    }>;
    prepareAndPreload(preloader: Preloader, balenaSdk: BalenaSDK, options: {
        appId?: string;
        commit?: string;
        pinDevice: boolean;
    }): Promise<void>;
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../command");
const cf = require("../utils/common-flags");
const lazy_1 = require("../utils/lazy");
const messages_1 = require("../utils/messages");
const validation_1 = require("../utils/validation");
class JoinCmd extends command_2.default {
    async run() {
        const { args: params, flags: options } = this.parse(JoinCmd);
        const promote = await Promise.resolve().then(() => require('../utils/promote'));
        const sdk = lazy_1.getBalenaSdk();
        const logger = await command_2.default.getLogger();
        return promote.join(logger, sdk, params.deviceIpOrHostname, options.application, options.pollInterval);
    }
}
exports.default = JoinCmd;
JoinCmd.description = lazy_1.stripIndent `
		Move a local device to an application on another balena server.

		Move a local device to an application on another balena server, causing
		the device to "join" the new server. The device must be running balenaOS.

		For example, you could provision a device against an openBalena installation
		where you perform end-to-end tests and then move it to balenaCloud when it's
		ready for production.

		To move a device between applications on the same server, use the
		\`balena device move\` command instead of \`balena join\`.

		If you don't specify a device hostname or IP, this command will automatically
		scan the local network for balenaOS devices and prompt you to select one
		from an interactive picker. This may require administrator/root privileges.
		Likewise, if the application flag is not provided then a picker will be shown.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
JoinCmd.examples = [
    '$ balena join',
    '$ balena join balena.local',
    '$ balena join balena.local --application MyApp',
    '$ balena join balena.local -a myorg/myapp',
    '$ balena join 192.168.1.25',
    '$ balena join 192.168.1.25 --application MyApp',
];
JoinCmd.args = [
    {
        name: 'deviceIpOrHostname',
        description: 'the IP or hostname of device',
        parse: validation_1.parseAsLocalHostnameOrIp,
    },
];
JoinCmd.usage = 'join [deviceIpOrHostname]';
JoinCmd.flags = {
    application: cf.application,
    pollInterval: command_1.flags.integer({
        description: 'the interval in minutes to check for updates',
        char: 'i',
    }),
    help: cf.help,
};
JoinCmd.authenticated = true;
JoinCmd.primary = true;
//# sourceMappingURL=join.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const ec = require("../../utils/env-common");
const lazy_1 = require("../../utils/lazy");
const validation_1 = require("../../utils/validation");
class EnvRenameCmd extends command_1.default {
    async run() {
        const { args: params, flags: opt } = this.parse(EnvRenameCmd);
        await command_1.default.checkLoggedIn();
        await lazy_1.getBalenaSdk().pine.patch({
            resource: ec.getVarResourceName(opt.config, opt.device, opt.service),
            id: params.id,
            body: {
                value: params.value,
            },
        });
    }
}
exports.default = EnvRenameCmd;
EnvRenameCmd.description = lazy_1.stripIndent `
		Change the value of a config or env var for an app, device or service.

		Change the value of a configuration or environment variable for an application,
		device or service, as selected by command-line options.

		${ec.rmRenameHelp.split('\n').join('\n\t\t')}
`;
EnvRenameCmd.examples = [
    '$ balena env rename 123123 emacs',
    '$ balena env rename 234234 emacs --service',
    '$ balena env rename 345345 emacs --device',
    '$ balena env rename 456456 emacs --device --service',
    '$ balena env rename 567567 1 --config',
    '$ balena env rename 678678 1 --device --config',
];
EnvRenameCmd.args = [
    {
        name: 'id',
        required: true,
        description: "variable's numeric database ID",
        parse: (input) => validation_1.parseAsInteger(input, 'id'),
    },
    {
        name: 'value',
        required: true,
        description: "variable value; if omitted, use value from this process' environment",
    },
];
EnvRenameCmd.usage = 'env rename <id> <value>';
EnvRenameCmd.flags = {
    config: ec.booleanConfig,
    device: ec.booleanDevice,
    service: ec.booleanService,
    help: cf.help,
};
//# sourceMappingURL=rename.js.map
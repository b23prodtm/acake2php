"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const errors_1 = require("../../errors");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
const messages_1 = require("../../utils/messages");
class EnvAddCmd extends command_1.default {
    async run() {
        const { args: params, flags: options } = this.parse(EnvAddCmd);
        const cmd = this;
        if (!options.application && !options.device) {
            throw new errors_1.ExpectedError('Either the --application or the --device option must be specified');
        }
        await command_1.default.checkLoggedIn();
        if (params.value == null) {
            params.value = process.env[params.name];
            if (params.value == null) {
                throw new errors_1.ExpectedError(`Value not found for environment variable: ${params.name}`);
            }
            else if (!options.quiet) {
                cmd.warn(`Using ${params.name}=${params.value} from CLI process environment`);
            }
        }
        const balena = lazy_1.getBalenaSdk();
        const reservedPrefixes = await getReservedPrefixes(balena);
        const isConfigVar = reservedPrefixes.some((prefix) => params.name.startsWith(prefix));
        if (options.service) {
            if (isConfigVar) {
                throw new errors_1.ExpectedError(lazy_1.stripIndent `
					Configuration variables prefixed with "${reservedPrefixes.join('" or "')}" cannot be set per service.
					Hint: remove the --service option or rename the variable.
				`);
            }
            await setServiceVars(balena, params, options);
            return;
        }
        const varType = isConfigVar ? 'configVar' : 'envVar';
        if (options.application) {
            for (const app of options.application.split(',')) {
                try {
                    await balena.models.application[varType].set(app, params.name, params.value);
                }
                catch (err) {
                    console.error(`${err.message}, app: ${app}`);
                    process.exitCode = 1;
                }
            }
        }
        else if (options.device) {
            for (const device of options.device.split(',')) {
                try {
                    await balena.models.device[varType].set(device, params.name, params.value);
                }
                catch (err) {
                    console.error(`${err.message}, device: ${device}`);
                    process.exitCode = 1;
                }
            }
        }
    }
}
exports.default = EnvAddCmd;
EnvAddCmd.description = lazy_1.stripIndent `
		Add env or config variable to application(s), device(s) or service(s).

		Add an environment or config variable to one or more applications, devices
		or services, as selected by the respective command-line options. Either the
		--application or the --device option must be provided, and either may be be
		used alongside the --service option to define a service-specific variable.
		(A service is an application container in a "microservices" application.)
		When the --service option is used in conjunction with the --device option,
		the service variable applies to the selected device only. Otherwise, it
		applies to all devices of the selected application (i.e., the application's
		fleet). If the --service option is omitted, the variable applies to all
		services.

		If VALUE is omitted, the CLI will attempt to use the value of the environment
		variable of same name in the CLI process' environment. In this case, a warning
		message will be printed. Use \`--quiet\` to suppress it.

		'BALENA_' or 'RESIN_' are reserved variable name prefixes used to identify
		"configuration variables". Configuration variables control balena platform
		features and are treated specially by balenaOS and the balena supervisor
		running on devices. They are also stored differently in the balenaCloud API
		database. Configuration variables cannot be set for specific services,
		therefore the --service option cannot be used when the variable name starts
		with a reserved prefix. When defining custom application variables, please
		avoid the reserved prefixes.

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
EnvAddCmd.examples = [
    '$ balena env add TERM --application MyApp',
    '$ balena env add EDITOR vim --application MyApp',
    '$ balena env add EDITOR vim -a myorg/myapp',
    '$ balena env add EDITOR vim --application MyApp,MyApp2',
    '$ balena env add EDITOR vim --application MyApp --service MyService',
    '$ balena env add EDITOR vim --application MyApp,MyApp2 --service MyService,MyService2',
    '$ balena env add EDITOR vim --device 7cf02a6',
    '$ balena env add EDITOR vim --device 7cf02a6,d6f1433',
    '$ balena env add EDITOR vim --device 7cf02a6 --service MyService',
    '$ balena env add EDITOR vim --device 7cf02a6,d6f1433 --service MyService,MyService2',
];
EnvAddCmd.args = [
    {
        name: 'name',
        required: true,
        description: 'environment or config variable name',
    },
    {
        name: 'value',
        required: false,
        description: "variable value; if omitted, use value from this process' environment",
    },
];
EnvAddCmd.usage = 'env add <name> [value]';
EnvAddCmd.flags = {
    application: { ...cf.application, exclusive: ['device'] },
    device: { ...cf.device, exclusive: ['application'] },
    help: cf.help,
    quiet: cf.quiet,
    service: cf.service,
};
async function setServiceVars(sdk, params, options) {
    if (options.application) {
        for (const app of options.application.split(',')) {
            for (const service of options.service.split(',')) {
                try {
                    const serviceId = await getServiceIdForApp(sdk, app, service);
                    await sdk.models.service.var.set(serviceId, params.name, params.value);
                }
                catch (err) {
                    console.error(`${err.message}, application: ${app}`);
                    process.exitCode = 1;
                }
            }
        }
    }
    else if (options.device) {
        const { getDeviceAndAppFromUUID } = await Promise.resolve().then(() => require('../../utils/cloud'));
        for (const uuid of options.device.split(',')) {
            let device;
            let app;
            try {
                [device, app] = await getDeviceAndAppFromUUID(sdk, uuid, ['id'], ['app_name']);
            }
            catch (err) {
                console.error(`${err.message}, device: ${uuid}`);
                process.exitCode = 1;
                continue;
            }
            for (const service of options.service.split(',')) {
                try {
                    const serviceId = await getServiceIdForApp(sdk, app.app_name, service);
                    await sdk.models.device.serviceVar.set(device.id, serviceId, params.name, params.value);
                }
                catch (err) {
                    console.error(`${err.message}, service: ${service}`);
                    process.exitCode = 1;
                }
            }
        }
    }
}
async function getServiceIdForApp(sdk, appName, serviceName) {
    let serviceId;
    const services = await sdk.models.service.getAllByApplication(appName, {
        $filter: { service_name: serviceName },
    });
    if (services.length > 0) {
        serviceId = services[0].id;
    }
    if (serviceId === undefined) {
        throw new errors_1.ExpectedError(`Cannot find service ${serviceName} for application ${appName}`);
    }
    return serviceId;
}
async function getReservedPrefixes(balena) {
    const settings = await balena.settings.getAll();
    const response = await balena.request.send({
        baseUrl: settings.apiUrl,
        url: '/config/vars',
    });
    return response.body.reservedNamespaces;
}
//# sourceMappingURL=add.js.map
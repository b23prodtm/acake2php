"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class LocalConfigureCmd extends command_1.default {
    constructor() {
        super(...arguments);
        this.BOOT_PARTITION = 1;
        this.CONNECTIONS_FOLDER = '/system-connections';
        this.inquirerOptions = (data) => [
            {
                message: 'Network SSID',
                type: 'input',
                name: 'networkSsid',
                default: data.networkSsid,
            },
            {
                message: 'Network Key',
                type: 'input',
                name: 'networkKey',
                default: data.networkKey,
            },
            {
                message: 'Do you want to set advanced settings?',
                type: 'confirm',
                name: 'advancedSettings',
                default: false,
            },
            {
                message: 'Device Hostname',
                type: 'input',
                name: 'hostname',
                default: data.hostname,
                when(answers) {
                    return answers.advancedSettings;
                },
            },
            {
                message: 'Do you want to enable persistent logging?',
                type: 'confirm',
                name: 'persistentLogging',
                default: data.persistentLogging,
                when(answers) {
                    return answers.advancedSettings;
                },
            },
        ];
        this.getConfiguration = async (data) => {
            const _ = await Promise.resolve().then(() => require('lodash'));
            const inquirer = await Promise.resolve().then(() => require('inquirer'));
            data = _.assign(data, {
                persistentLogging: data.persistentLogging || false,
            });
            const answers = await inquirer.prompt(this.inquirerOptions(data));
            return _.merge(data, answers);
        };
        this.CONNECTION_FILE = lazy_1.stripIndent `
		[connection]
		id=resin-wifi
		type=wifi

		[wifi]
		hidden=true
		mode=infrastructure
		ssid=My_Wifi_Ssid

		[wifi-security]
		auth-alg=open
		key-mgmt=wpa-psk
		psk=super_secret_wifi_password

		[ipv4]
		method=auto

		[ipv6]
		addr-gen-mode=stable-privacy
		method=auto\
	`;
    }
    async run() {
        const { args: params } = this.parse(LocalConfigureCmd);
        const { promisify } = await Promise.resolve().then(() => require('util'));
        const path = await Promise.resolve().then(() => require('path'));
        const umount = await Promise.resolve().then(() => require('umount'));
        const umountAsync = promisify(umount.umount);
        const isMountedAsync = promisify(umount.isMounted);
        const reconfix = await Promise.resolve().then(() => require('reconfix'));
        const denymount = promisify(await Promise.resolve().then(() => require('denymount')));
        const Logger = await Promise.resolve().then(() => require('../../utils/logger'));
        const logger = Logger.getLogger();
        const configurationSchema = await this.prepareConnectionFile(params.target);
        if (await isMountedAsync(params.target)) {
            await umountAsync(params.target);
        }
        const dmOpts = {};
        if (process.pkg) {
            dmOpts.executablePath = path.join(path.dirname(process.execPath), 'denymount');
        }
        const dmHandler = (cb) => reconfix
            .readConfiguration(configurationSchema, params.target)
            .then(async (config) => {
            logger.logDebug('Current config:');
            logger.logDebug(JSON.stringify(config));
            const answers = await this.getConfiguration(config);
            logger.logDebug('New config:');
            logger.logDebug(JSON.stringify(answers));
            if (!answers.hostname) {
                await this.removeHostname(configurationSchema);
            }
            return await reconfix.writeConfiguration(configurationSchema, answers, params.target);
        })
            .asCallback(cb);
        await denymount(params.target, dmHandler, dmOpts);
        console.log('Done!');
    }
    getConfigurationSchema(connectionFileName) {
        connectionFileName !== null && connectionFileName !== void 0 ? connectionFileName : (connectionFileName = 'resin-wifi');
        return {
            mapper: [
                {
                    template: {
                        persistentLogging: '{{persistentLogging}}',
                    },
                    domain: [['config_json', 'persistentLogging']],
                },
                {
                    template: {
                        hostname: '{{hostname}}',
                    },
                    domain: [['config_json', 'hostname']],
                },
                {
                    template: {
                        wifi: {
                            ssid: '{{networkSsid}}',
                        },
                        'wifi-security': {
                            psk: '{{networkKey}}',
                        },
                    },
                    domain: [
                        ['system_connections', connectionFileName, 'wifi'],
                        ['system_connections', connectionFileName, 'wifi-security'],
                    ],
                },
            ],
            files: {
                system_connections: {
                    fileset: true,
                    type: 'ini',
                    location: {
                        path: this.CONNECTIONS_FOLDER.slice(1),
                        partition: this.BOOT_PARTITION,
                    },
                },
                config_json: {
                    type: 'json',
                    location: {
                        path: 'config.json',
                        partition: this.BOOT_PARTITION,
                    },
                },
            },
        };
    }
    async prepareConnectionFile(target) {
        const _ = await Promise.resolve().then(() => require('lodash'));
        const imagefs = await Promise.resolve().then(() => require('resin-image-fs'));
        const files = await imagefs.listDirectory({
            image: target,
            partition: this.BOOT_PARTITION,
            path: this.CONNECTIONS_FOLDER,
        });
        let connectionFileName;
        if (_.includes(files, 'resin-wifi')) {
        }
        else if (_.includes(files, 'resin-sample.ignore')) {
            await imagefs.copy({
                image: target,
                partition: this.BOOT_PARTITION,
                path: `${this.CONNECTIONS_FOLDER}/resin-sample.ignore`,
            }, {
                image: target,
                partition: this.BOOT_PARTITION,
                path: `${this.CONNECTIONS_FOLDER}/resin-wifi`,
            });
        }
        else if (_.includes(files, 'resin-sample')) {
            connectionFileName = 'resin-sample';
        }
        else {
            await imagefs.writeFile({
                image: target,
                partition: this.BOOT_PARTITION,
                path: `${this.CONNECTIONS_FOLDER}/resin-wifi`,
            }, this.CONNECTION_FILE);
        }
        return await this.getConfigurationSchema(connectionFileName);
    }
    async removeHostname(schema) {
        const _ = await Promise.resolve().then(() => require('lodash'));
        schema.mapper = _.reject(schema.mapper, (mapper) => _.isEqual(Object.keys(mapper.template), ['hostname']));
    }
}
exports.default = LocalConfigureCmd;
LocalConfigureCmd.description = lazy_1.stripIndent `
		(Re)configure a balenaOS drive or image.

		Configure or reconfigure a balenaOS drive or image.
	`;
LocalConfigureCmd.examples = [
    '$ balena local configure /dev/sdc',
    '$ balena local configure path/to/image.img',
];
LocalConfigureCmd.args = [
    {
        name: 'target',
        description: 'path of drive or image to configure',
        required: true,
    },
];
LocalConfigureCmd.usage = 'local configure <target>';
LocalConfigureCmd.flags = {
    help: cf.help,
};
LocalConfigureCmd.root = true;
//# sourceMappingURL=configure.js.map
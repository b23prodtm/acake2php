"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../../command");
const errors_1 = require("../../errors");
const cf = require("../../utils/common-flags");
const lazy_1 = require("../../utils/lazy");
class LocalFlashCmd extends command_1.default {
    async run() {
        const { args: params, flags: options } = this.parse(LocalFlashCmd);
        const { sourceDestination, multiWrite } = await Promise.resolve().then(() => require('etcher-sdk'));
        const drive = await this.getDrive(options);
        const yes = options.yes ||
            (await lazy_1.getCliForm().ask({
                message: 'This will erase the selected drive. Are you sure?',
                type: 'confirm',
                name: 'yes',
                default: false,
            }));
        if (!yes) {
            console.log(lazy_1.getChalk().red.bold('Aborted image flash'));
            process.exit(0);
        }
        const file = new sourceDestination.File(params.image, sourceDestination.File.OpenFlags.Read);
        const source = await file.getInnerSource();
        const visuals = lazy_1.getVisuals();
        const progressBars = {
            flashing: new visuals.Progress('Flashing'),
            verifying: new visuals.Progress('Validating'),
        };
        await multiWrite.pipeSourceToDestinations(source, [drive], (_, error) => {
            console.log(lazy_1.getChalk().red.bold(error.message));
        }, (progress) => {
            progressBars[progress.type].update(progress);
        }, true);
    }
    async getDrive(options) {
        const drive = options.drive || (await lazy_1.getVisuals().drive('Select a drive'));
        const sdk = await Promise.resolve().then(() => require('etcher-sdk'));
        const adapter = new sdk.scanner.adapters.BlockDeviceAdapter(() => false);
        const scanner = new sdk.scanner.Scanner([adapter]);
        await scanner.start();
        try {
            const d = scanner.getBy('device', drive);
            if (d === undefined ||
                !(d instanceof sdk.sourceDestination.BlockDevice)) {
                throw new errors_1.ExpectedError(`Drive not found: ${options.drive}`);
            }
            return d;
        }
        finally {
            scanner.stop();
        }
    }
}
exports.default = LocalFlashCmd;
LocalFlashCmd.description = lazy_1.stripIndent `
		Flash an image to a drive.

		Flash a balenaOS image to a drive.
		Image file may be one of: .img|.zip|.gz|.bz2|.xz

		If --drive is not specified, then it will interactively
		show a list of available drives for selection.
	`;
LocalFlashCmd.examples = [
    '$ balena local flash path/to/balenaos.img',
    '$ balena local flash path/to/balenaos.img --drive /dev/disk2',
    '$ balena local flash path/to/balenaos.img --drive /dev/disk2 --yes',
];
LocalFlashCmd.args = [
    {
        name: 'image',
        description: 'path to OS image',
        required: true,
    },
];
LocalFlashCmd.usage = 'local flash <image>';
LocalFlashCmd.flags = {
    drive: cf.drive,
    yes: cf.yes,
    help: cf.help,
};
//# sourceMappingURL=flash.js.map
import { flags } from '@oclif/command';
import Command from '../../command';
interface FlagsDef {
    help: void;
}
export default class LocalConfigureCmd extends Command {
    static description: string;
    static examples: string[];
    static args: {
        name: string;
        description: string;
        required: boolean;
    }[];
    static usage: string;
    static flags: flags.Input<FlagsDef>;
    static root: boolean;
    run(): Promise<void>;
    readonly BOOT_PARTITION = 1;
    readonly CONNECTIONS_FOLDER = "/system-connections";
    getConfigurationSchema(connectionFileName?: string): {
        mapper: ({
            template: {
                persistentLogging: string;
                hostname?: undefined;
                wifi?: undefined;
                'wifi-security'?: undefined;
            };
            domain: string[][];
        } | {
            template: {
                hostname: string;
                persistentLogging?: undefined;
                wifi?: undefined;
                'wifi-security'?: undefined;
            };
            domain: string[][];
        } | {
            template: {
                wifi: {
                    ssid: string;
                };
                'wifi-security': {
                    psk: string;
                };
                persistentLogging?: undefined;
                hostname?: undefined;
            };
            domain: string[][];
        })[];
        files: {
            system_connections: {
                fileset: boolean;
                type: string;
                location: {
                    path: string;
                    partition: number;
                };
            };
            config_json: {
                type: string;
                location: {
                    path: string;
                    partition: number;
                };
            };
        };
    };
    inquirerOptions: (data: any) => ({
        message: string;
        type: string;
        name: string;
        default: any;
    } | {
        message: string;
        type: string;
        name: string;
        default: any;
        when(answers: any): any;
    })[];
    getConfiguration: (data: any) => Promise<any>;
    readonly CONNECTION_FILE: string;
    prepareConnectionFile(target: string): Promise<{
        mapper: ({
            template: {
                persistentLogging: string;
                hostname?: undefined;
                wifi?: undefined;
                'wifi-security'?: undefined;
            };
            domain: string[][];
        } | {
            template: {
                hostname: string;
                persistentLogging?: undefined;
                wifi?: undefined;
                'wifi-security'?: undefined;
            };
            domain: string[][];
        } | {
            template: {
                wifi: {
                    ssid: string;
                };
                'wifi-security': {
                    psk: string;
                };
                persistentLogging?: undefined;
                hostname?: undefined;
            };
            domain: string[][];
        })[];
        files: {
            system_connections: {
                fileset: boolean;
                type: string;
                location: {
                    path: string;
                    partition: number;
                };
            };
            config_json: {
                type: string;
                location: {
                    path: string;
                    partition: number;
                };
            };
        };
    }>;
    removeHostname(schema: any): Promise<void>;
}
export {};

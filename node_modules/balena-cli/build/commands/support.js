"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = require("../command");
const errors_1 = require("../errors");
const cf = require("../utils/common-flags");
const lazy_1 = require("../utils/lazy");
const messages_1 = require("../utils/messages");
class SupportCmd extends command_2.default {
    async run() {
        var _a, _b;
        const { args: params, flags: options } = this.parse(SupportCmd);
        const balena = lazy_1.getBalenaSdk();
        const ux = lazy_1.getCliUx();
        const enabling = params.action === 'enable';
        if (!options.device && !options.application) {
            throw new errors_1.ExpectedError('At least one device or application must be specified');
        }
        if (options.duration != null && !enabling) {
            throw new errors_1.ExpectedError('--duration option is only applicable when enabling support');
        }
        const durationDefault = '24h';
        const duration = options.duration || durationDefault;
        const expiryTs = Date.now() + this.parseDuration(duration);
        const deviceUuids = ((_a = options.device) === null || _a === void 0 ? void 0 : _a.split(',')) || [];
        const appNames = ((_b = options.application) === null || _b === void 0 ? void 0 : _b.split(',')) || [];
        const enablingMessage = 'Enabling support access for';
        const disablingMessage = 'Disabling support access for';
        for (const deviceUuid of deviceUuids) {
            if (enabling) {
                ux.action.start(`${enablingMessage} device ${deviceUuid}`);
                await balena.models.device.grantSupportAccess(deviceUuid, expiryTs);
            }
            else if (params.action === 'disable') {
                ux.action.start(`${disablingMessage} device ${deviceUuid}`);
                await balena.models.device.revokeSupportAccess(deviceUuid);
            }
            ux.action.stop();
        }
        for (const appName of appNames) {
            if (enabling) {
                ux.action.start(`${enablingMessage} application ${appName}`);
                await balena.models.application.grantSupportAccess(appName, expiryTs);
            }
            else if (params.action === 'disable') {
                ux.action.start(`${disablingMessage} application ${appName}`);
                await balena.models.application.revokeSupportAccess(appName);
            }
            ux.action.stop();
        }
        if (enabling) {
            console.log(`Access has been granted for ${duration}, expiring ${new Date(expiryTs).toLocaleString()}`);
        }
    }
    parseDuration(duration) {
        const parseErrorMsg = 'Duration must be specified as number followed by h or d, e.g. 24h, 1d';
        const unit = duration.slice(duration.length - 1);
        const amount = Number(duration.substring(0, duration.length - 1));
        if (isNaN(amount)) {
            throw new errors_1.ExpectedError(parseErrorMsg);
        }
        let durationMs;
        if (['h', 'H'].includes(unit)) {
            durationMs = amount * 60 * 60 * 1000;
        }
        else if (['d', 'D'].includes(unit)) {
            durationMs = amount * 24 * 60 * 60 * 1000;
        }
        else {
            throw new errors_1.ExpectedError(parseErrorMsg);
        }
        return durationMs;
    }
}
exports.default = SupportCmd;
SupportCmd.description = lazy_1.stripIndent `
		Grant or revoke support access for devices and applications.

		Grant or revoke balena support agent access to devices and applications
		on balenaCloud. (This command does not apply to openBalena.)
		Access will be automatically revoked once the specified duration has elapsed.

		Duration defaults to 24h, but can be specified using --duration flag in days
		or hours, e.g. '12h', '2d'.

		Both --device and --application flags accept multiple values, specified as
		a comma-separated list (with no spaces).

		${messages_1.applicationIdInfo.split('\n').join('\n\t\t')}
	`;
SupportCmd.examples = [
    'balena support enable --device ab346f,cd457a --duration 3d',
    'balena support enable --application app3 --duration 12h',
    'balena support disable -a myorg/myapp',
];
SupportCmd.args = [
    {
        name: 'action',
        description: 'enable|disable support access',
        options: ['enable', 'disable'],
    },
];
SupportCmd.usage = 'support <action>';
SupportCmd.flags = {
    device: command_1.flags.string({
        description: 'comma-separated list (no spaces) of device UUIDs',
        char: 'd',
    }),
    application: {
        ...cf.application,
        description: 'comma-separated list (no spaces) of application names or org/name slugs',
    },
    duration: command_1.flags.string({
        description: 'length of time to enable support for, in (h)ours or (d)ays, e.g. 12h, 2d',
        char: 't',
    }),
    help: cf.help,
};
SupportCmd.authenticated = true;
//# sourceMappingURL=support.js.map
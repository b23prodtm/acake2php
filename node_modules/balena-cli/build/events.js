"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackCommand = void 0;
const _ = require("lodash");
const Mixpanel = require("mixpanel");
const packageJSON = require("../package.json");
const lazy_1 = require("./utils/lazy");
const getMixpanel = _.once((balenaUrl) => {
    return Mixpanel.init('balena-main', {
        host: `api.${balenaUrl}`,
        path: '/mixpanel',
        protocol: 'https',
    });
});
async function trackCommand(commandSignature) {
    try {
        let Sentry;
        if (!process.env.BALENARC_NO_SENTRY) {
            Sentry = await Promise.resolve().then(() => require('@sentry/node'));
            Sentry.configureScope((scope) => {
                scope.setExtra('command', commandSignature);
            });
        }
        const settings = await Promise.resolve().then(() => require('balena-settings-client'));
        const balenaUrl = settings.get('balenaUrl');
        const username = await (async () => {
            const getStorage = await Promise.resolve().then(() => require('balena-settings-storage'));
            const dataDirectory = settings.get('dataDirectory');
            const storage = getStorage({ dataDirectory });
            let token;
            try {
                token = await storage.get('token');
            }
            catch (_a) {
                return;
            }
            try {
                const result = (await storage.get('cachedUsername'));
                if (result.token === token) {
                    return result.username;
                }
            }
            catch (_b) {
            }
            try {
                const balena = lazy_1.getBalenaSdk();
                const $username = await balena.auth.whoami();
                await storage.set('cachedUsername', {
                    token,
                    username: $username,
                });
                return $username;
            }
            catch (_c) {
                return;
            }
        })();
        const mixpanel = getMixpanel(balenaUrl);
        if (!process.env.BALENARC_NO_SENTRY) {
            Sentry.configureScope((scope) => {
                scope.setUser({
                    id: username,
                    username,
                });
            });
        }
        if (!process.env.BALENA_CLI_TEST_TYPE &&
            !process.env.BALENARC_NO_ANALYTICS) {
            await mixpanel.track(`[CLI] ${commandSignature}`, {
                distinct_id: username,
                version: packageJSON.version,
                node: process.version,
                arch: process.arch,
                balenaUrl,
                platform: process.platform,
            });
        }
    }
    catch (_a) {
    }
}
exports.trackCommand = trackCommand;
//# sourceMappingURL=events.js.map
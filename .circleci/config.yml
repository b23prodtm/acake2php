# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers
        environment:
          DOCKER_OS_NAME: linux
          DOCKER_PHP_VERSION: 7.1
          DB: Mysql
          # a host alias or IP address
          MYSQL_SERVICE_HOST: db
          MYSQL_SERVICE_PORT: 3306
          TEST_MYSQL_SERVICE_HOST: db
          TEST_MYSQL_SERVICE_PORT: 3306
          DATABASE_NAME: phpcms
          DATABASE_SERVICE_NAME: MYSQL
          #(optional)
          #WEBHOOK_URL: <discordapp-url>
          # Persistent connection credentials
          DATABASE_USER: root
          # overrides docker-compose-alias.sh -p=<password>
          DATABASE_PASSWORD: proot
          # Just add TEST_DATABASE_USER and TEST_DATABASE_PASSWORD
          TEST_DATABASE_USER: ubuntu
          # overrides docker-compose-alias.sh -t=<password>
          TEST_DATABASE_PASSWORD: ptest
          # CakePHP generated
          #CAKEPHP_SECRET_TOKEN: <secret-token>
          #CAKEPHP_SECRET_SALT: <secret-salt>
          #CAKEPHP_SECURITY_CIPHER_SEED: <cipher-seed>
          # Generated by ./configure.sh -h
          GET_HASH_PASSWORD: ${GET_HASH_PASSWORD}

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      - image: tkuchiki/delayed-mysql
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: 'proot'
          MYSQL_DATABASE: phpcms

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run: ./test-cake.sh --docker | grep Test
      # run tests with phpunit or codecept
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run
      #- run: ./vendor/bin/phpunit

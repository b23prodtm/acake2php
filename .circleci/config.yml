# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    environment:
      DB: Mysql
      # a host alias or IP address
      MYSQL_SERVICE_HOST: 192.168.99.100
      MYSQL_SERVICE_PORT: 3306
      TEST_MYSQL_SERVICE_HOST: 192.168.99.100
      TEST_MYSQL_SERVICE_PORT: 3306
      DATABASE_NAME: phpcms
      DATABASE_SERVICE_NAME: MYSQL
      #(optional)
      #WEBHOOK_URL: <discordapp-url>
      # Persistent connection credentials
      DATABASE_USER: root
      # overrides docker-compose-alias.sh -p=<password>
      DATABASE_PASSWORD: pdocker
      # Just add TEST_DATABASE_USER and TEST_DATABASE_PASSWORD
      TEST_DATABASE_USER: ubuntu
      # overrides docker-compose-alias.sh -t=<password>
      TEST_DATABASE_PASSWORD: ptest
      # CakePHP generated
      #CAKEPHP_SECRET_TOKEN: <secret-token>
      #CAKEPHP_SECRET_SALT: <secret-salt>
      #CAKEPHP_SECURITY_CIPHER_SEED: <cipher-seed>
      # Generated by ./configure.sh -h
      GET_HASH_PASSWORD: ${GET_HASH_PASSWORD}
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers
        environment:
          DOCKER_OS_NAME: linux
          DOCKER_PHP_VERSION: 7.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      - image: circleci/mysql:5.7
        container_name: mysql
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: 'pdocker'
          MYSQL_DATABASE: phpcms

    steps:
      - checkout
      - run: git submodule update --init --recursive

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip
      - run: sudo apt-get install mariadb-client

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.lock" }}
          paths:
            - ./app/Vendor/

      - run: ./test-cake.sh -v --docker -p=$DATABASE_PASSWORD -t=$TEST_DATABASE_PASSWORD #| grep Test
      # Installing and Using docker-compose
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)

      # use a primary image that already has Docker (recommended)
      # build and push Docker image
      # (4)
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          ./docker-compose-alias.sh -dns=b23prodtm.info -p=$DATABASE_PASSWORD -t=$TEST_DATABASE_PASSWORD  up -d --build
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push b23dkr/myphpcms:$TAG
